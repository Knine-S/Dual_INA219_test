
build/debug/ina219TestEPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08003e74  08003e74  00004e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ec  080040ec  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040ec  080040ec  000050ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f4  080040f4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000050f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040f8  080040f8  000050f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080040fc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000218  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .comment      00000039  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f47b  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021d8  00000000  00000000  0001554c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b20  00000000  00000000  00017728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000085e  00000000  00000000  00018248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d94c  00000000  00000000  00018aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003a0b  00000000  00000000  000263f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d3c  00000000  00000000  00029e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000801e  00000000  00000000  0002bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000179  00000000  00000000  00033b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b80c 	b.w	8000adc <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f003 f84a 	bl	8003b64 <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__do_global_dtors_aux>:
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4c05      	ldr	r4, [pc, #20]	@ (8000af8 <__do_global_dtors_aux+0x18>)
 8000ae4:	7823      	ldrb	r3, [r4, #0]
 8000ae6:	b933      	cbnz	r3, 8000af6 <__do_global_dtors_aux+0x16>
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <__do_global_dtors_aux+0x1c>)
 8000aea:	b113      	cbz	r3, 8000af2 <__do_global_dtors_aux+0x12>
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <__do_global_dtors_aux+0x20>)
 8000aee:	f3af 8000 	nop.w
 8000af2:	2301      	movs	r3, #1
 8000af4:	7023      	strb	r3, [r4, #0]
 8000af6:	bd10      	pop	{r4, pc}
 8000af8:	20000068 	.word	0x20000068
 8000afc:	00000000 	.word	0x00000000
 8000b00:	08003e5c 	.word	0x08003e5c

08000b04 <frame_dummy>:
 8000b04:	b508      	push	{r3, lr}
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <frame_dummy+0x10>)
 8000b08:	b11b      	cbz	r3, 8000b12 <frame_dummy+0xe>
 8000b0a:	4903      	ldr	r1, [pc, #12]	@ (8000b18 <frame_dummy+0x14>)
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <frame_dummy+0x18>)
 8000b0e:	f3af 8000 	nop.w
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	00000000 	.word	0x00000000
 8000b18:	2000006c 	.word	0x2000006c
 8000b1c:	08003e5c 	.word	0x08003e5c

08000b20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b20:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2200      	movs	r2, #0
 8000b24:	9201      	str	r2, [sp, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	@ (8000b68 <MX_GPIO_Init+0x48>)
 8000b28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b2a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000b2e:	6319      	str	r1, [r3, #48]	@ 0x30
 8000b30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b32:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000b36:	9101      	str	r1, [sp, #4]
 8000b38:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	9202      	str	r2, [sp, #8]
 8000b3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b3e:	f041 0101 	orr.w	r1, r1, #1
 8000b42:	6319      	str	r1, [r3, #48]	@ 0x30
 8000b44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000b46:	f001 0101 	and.w	r1, r1, #1
 8000b4a:	9102      	str	r1, [sp, #8]
 8000b4c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	9203      	str	r2, [sp, #12]
 8000b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b52:	f042 0202 	orr.w	r2, r2, #2
 8000b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	9303      	str	r3, [sp, #12]
 8000b60:	9b03      	ldr	r3, [sp, #12]

}
 8000b62:	b004      	add	sp, #16
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b6c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b6e:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <MX_I2C2_Init+0x30>)
 8000b70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_I2C2_Init+0x34>)
 8000b72:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_I2C2_Init+0x38>)
 8000b76:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b7c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b82:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b86:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b8c:	f000 fee4 	bl	8001958 <HAL_I2C_Init>
 8000b90:	b900      	cbnz	r0, 8000b94 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b92:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b94:	f000 f976 	bl	8000e84 <Error_Handler>
}
 8000b98:	e7fb      	b.n	8000b92 <MX_I2C2_Init+0x26>
 8000b9a:	bf00      	nop
 8000b9c:	20000084 	.word	0x20000084
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	000186a0 	.word	0x000186a0

08000ba8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba8:	b530      	push	{r4, r5, lr}
 8000baa:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2300      	movs	r3, #0
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	9305      	str	r3, [sp, #20]
 8000bb4:	9306      	str	r3, [sp, #24]
 8000bb6:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8000bb8:	6802      	ldr	r2, [r0, #0]
 8000bba:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_I2C_MspInit+0x64>)
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bc0:	b009      	add	sp, #36	@ 0x24
 8000bc2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	2500      	movs	r5, #0
 8000bc6:	9501      	str	r5, [sp, #4]
 8000bc8:	4c11      	ldr	r4, [pc, #68]	@ (8000c10 <HAL_I2C_MspInit+0x68>)
 8000bca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000bd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000be0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bea:	2304      	movs	r3, #4
 8000bec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	a903      	add	r1, sp, #12
 8000bf0:	4808      	ldr	r0, [pc, #32]	@ (8000c14 <HAL_I2C_MspInit+0x6c>)
 8000bf2:	f000 fb5d 	bl	80012b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bf6:	9502      	str	r5, [sp, #8]
 8000bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfe:	6423      	str	r3, [r4, #64]	@ 0x40
 8000c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	9b02      	ldr	r3, [sp, #8]
}
 8000c0a:	e7d9      	b.n	8000bc0 <HAL_I2C_MspInit+0x18>
 8000c0c:	40005800 	.word	0x40005800
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <i2c_read>:
{
  return (i2c_read(ina219, INA219_REG_CONFIGURATION) == config_val);
}

uint16_t i2c_read(INA219_t *ina219, uint8_t reg)
{
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	f88d 100f 	strb.w	r1, [sp, #15]
  uint8_t data[2] = {0};
 8000c22:	2300      	movs	r3, #0
 8000c24:	f8ad 3014 	strh.w	r3, [sp, #20]
  HAL_I2C_Master_Transmit(&hi2c2, ina219->address << 1, &reg, 1, HAL_MAX_DELAY);
 8000c28:	7801      	ldrb	r1, [r0, #0]
 8000c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8000c60 <i2c_read+0x48>)
 8000c2c:	f04f 36ff 	mov.w	r6, #4294967295
 8000c30:	9600      	str	r6, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	f10d 020f 	add.w	r2, sp, #15
 8000c38:	4099      	lsls	r1, r3
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f000 ff6a 	bl	8001b14 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, ina219->address << 1, data, 2, HAL_MAX_DELAY);
 8000c40:	7821      	ldrb	r1, [r4, #0]
 8000c42:	9600      	str	r6, [sp, #0]
 8000c44:	2302      	movs	r3, #2
 8000c46:	aa05      	add	r2, sp, #20
 8000c48:	0049      	lsls	r1, r1, #1
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	f001 f81c 	bl	8001c88 <HAL_I2C_Master_Receive>
  return (data[0] << 8) | data[1];
 8000c50:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8000c54:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8000c58:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000c5c:	b006      	add	sp, #24
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	20000084 	.word	0x20000084
 8000c64:	00000000 	.word	0x00000000

08000c68 <ina219_get_bus_voltage>:
{
 8000c68:	b508      	push	{r3, lr}
  uint16_t reg_val = i2c_read(ina219, INA219_REG_BUS_VOLTAGE);
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	f7ff ffd4 	bl	8000c18 <i2c_read>
  return (reg_val >> 3) * 4e-3;
 8000c70:	f3c0 00cf 	ubfx	r0, r0, #3, #16
 8000c74:	f7ff fc2e 	bl	80004d4 <__aeabi_i2d>
 8000c78:	a305      	add	r3, pc, #20	@ (adr r3, 8000c90 <ina219_get_bus_voltage+0x28>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	f7ff fc93 	bl	80005a8 <__aeabi_dmul>
 8000c82:	f7ff fec3 	bl	8000a0c <__aeabi_d2f>
}
 8000c86:	ee00 0a10 	vmov	s0, r0
 8000c8a:	bd08      	pop	{r3, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c94:	3f70624d 	.word	0x3f70624d

08000c98 <ina219_get_current>:
{
 8000c98:	b508      	push	{r3, lr}
  float reg_val = (int16_t)i2c_read(ina219, INA219_REG_CURRENT);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	f7ff ffbc 	bl	8000c18 <i2c_read>
 8000ca0:	b200      	sxth	r0, r0
 8000ca2:	ee07 0a90 	vmov	s15, r0
 8000ca6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
  return reg_val * current_lsb;
 8000caa:	4b03      	ldr	r3, [pc, #12]	@ (8000cb8 <ina219_get_current+0x20>)
 8000cac:	edd3 7a00 	vldr	s15, [r3]
}
 8000cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000cb4:	bd08      	pop	{r3, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000d8 	.word	0x200000d8
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <ina219_get_shunt_voltage>:
{
 8000cc0:	b508      	push	{r3, lr}
  float reg_val = (int16_t)i2c_read(ina219, INA219_REG_SHUNT_VOLTAGE);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f7ff ffa8 	bl	8000c18 <i2c_read>
 8000cc8:	b200      	sxth	r0, r0
  return reg_val * 1e-5;
 8000cca:	ee07 0a90 	vmov	s15, r0
 8000cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd2:	ee17 0a90 	vmov	r0, s15
 8000cd6:	f7ff fc0f 	bl	80004f8 <__aeabi_f2d>
 8000cda:	a305      	add	r3, pc, #20	@ (adr r3, 8000cf0 <ina219_get_shunt_voltage+0x30>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fc62 	bl	80005a8 <__aeabi_dmul>
 8000ce4:	f7ff fe92 	bl	8000a0c <__aeabi_d2f>
}
 8000ce8:	ee00 0a10 	vmov	s0, r0
 8000cec:	bd08      	pop	{r3, pc}
 8000cee:	bf00      	nop
 8000cf0:	88e368f1 	.word	0x88e368f1
 8000cf4:	3ee4f8b5 	.word	0x3ee4f8b5

08000cf8 <ina219_get_power>:
{
 8000cf8:	b508      	push	{r3, lr}
  float reg_val = (int16_t)i2c_read(ina219, INA219_REG_POWER);
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	f7ff ff8c 	bl	8000c18 <i2c_read>
 8000d00:	b203      	sxth	r3, r0
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return reg_val * 20 * current_lsb;
 8000d0a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d12:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <ina219_get_power+0x28>)
 8000d14:	ed93 0a00 	vldr	s0, [r3]
}
 8000d18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8000d1c:	bd08      	pop	{r3, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000d8 	.word	0x200000d8

08000d24 <i2c_write>:

bool i2c_write(INA219_t *ina219, const uint8_t reg, const uint16_t val)
{
 8000d24:	b500      	push	{lr}
 8000d26:	b085      	sub	sp, #20
  uint8_t data[3] = {reg, (uint8_t)(val >> 8), (uint8_t)(val & 0xFF)};
 8000d28:	f88d 100c 	strb.w	r1, [sp, #12]
 8000d2c:	0a13      	lsrs	r3, r2, #8
 8000d2e:	f88d 300d 	strb.w	r3, [sp, #13]
 8000d32:	f88d 200e 	strb.w	r2, [sp, #14]
  if(HAL_I2C_Master_Transmit(&hi2c2, ina219->address << 1, data, 3, HAL_MAX_DELAY)==HAL_OK) return 1;
 8000d36:	7801      	ldrb	r1, [r0, #0]
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2303      	movs	r3, #3
 8000d40:	aa03      	add	r2, sp, #12
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <i2c_write+0x34>)
 8000d46:	f000 fee5 	bl	8001b14 <HAL_I2C_Master_Transmit>
 8000d4a:	b918      	cbnz	r0, 8000d54 <i2c_write+0x30>
 8000d4c:	2001      	movs	r0, #1
  else return 0;
}
 8000d4e:	b005      	add	sp, #20
 8000d50:	f85d fb04 	ldr.w	pc, [sp], #4
  else return 0;
 8000d54:	2000      	movs	r0, #0
 8000d56:	e7fa      	b.n	8000d4e <i2c_write+0x2a>
 8000d58:	20000084 	.word	0x20000084

08000d5c <ina219_reset>:
{
 8000d5c:	b510      	push	{r4, lr}
 8000d5e:	4604      	mov	r4, r0
  if(i2c_write(ina219, INA219_REG_CONFIGURATION, 0x8000)){
 8000d60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d64:	2100      	movs	r1, #0
 8000d66:	f7ff ffdd 	bl	8000d24 <i2c_write>
 8000d6a:	b178      	cbz	r0, 8000d8c <ina219_reset+0x30>
    printf("reset write success\n");
 8000d6c:	480f      	ldr	r0, [pc, #60]	@ (8000dac <ina219_reset+0x50>)
 8000d6e:	f002 f89d 	bl	8002eac <puts>
  if(i2c_read(ina219, INA219_REG_CONFIGURATION) == 0x399F)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff ff4f 	bl	8000c18 <i2c_read>
 8000d7a:	f643 139f 	movw	r3, #14751	@ 0x399f
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d008      	beq.n	8000d94 <ina219_reset+0x38>
  printf("reset failed\n");
 8000d82:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <ina219_reset+0x54>)
 8000d84:	f002 f892 	bl	8002eac <puts>
  return false;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	bd10      	pop	{r4, pc}
    printf("reset write failed\n");
 8000d8c:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <ina219_reset+0x58>)
 8000d8e:	f002 f88d 	bl	8002eac <puts>
 8000d92:	e7ee      	b.n	8000d72 <ina219_reset+0x16>
    config_val = 0x399F;
 8000d94:	4b08      	ldr	r3, [pc, #32]	@ (8000db8 <ina219_reset+0x5c>)
 8000d96:	f643 129f 	movw	r2, #14751	@ 0x399f
 8000d9a:	801a      	strh	r2, [r3, #0]
    current_lsb = 0.0;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <ina219_reset+0x60>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
    printf("reset success\n");
 8000da2:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <ina219_reset+0x64>)
 8000da4:	f002 f882 	bl	8002eac <puts>
    return true;
 8000da8:	2001      	movs	r0, #1
 8000daa:	e7ee      	b.n	8000d8a <ina219_reset+0x2e>
 8000dac:	08003e74 	.word	0x08003e74
 8000db0:	08003eb0 	.word	0x08003eb0
 8000db4:	08003e88 	.word	0x08003e88
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	200000d8 	.word	0x200000d8
 8000dc0:	08003ea0 	.word	0x08003ea0

08000dc4 <ina219_init>:
{
 8000dc4:	b508      	push	{r3, lr}
  if(ina219_reset(ina219))
 8000dc6:	f7ff ffc9 	bl	8000d5c <ina219_reset>
}
 8000dca:	bd08      	pop	{r3, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <ina219_calibrate>:
{
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	ed2d 8b02 	vpush	{d8}
 8000dd6:	4605      	mov	r5, r0
  float temp_current_lsb = max_current * 3.0517578125e-5;
 8000dd8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8000e38 <ina219_calibrate+0x68>
 8000ddc:	ee20 8a27 	vmul.f32	s16, s0, s15
  const uint16_t calibration_val = (uint16_t)(0.04096 / (temp_current_lsb * r_shunt));
 8000de0:	ee68 7a20 	vmul.f32	s15, s16, s1
 8000de4:	ee17 0a90 	vmov	r0, s15
 8000de8:	f7ff fb86 	bl	80004f8 <__aeabi_f2d>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	a10f      	add	r1, pc, #60	@ (adr r1, 8000e30 <ina219_calibrate+0x60>)
 8000df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df6:	f7ff fd01 	bl	80007fc <__aeabi_ddiv>
 8000dfa:	f7ff fde7 	bl	80009cc <__aeabi_d2uiz>
 8000dfe:	b284      	uxth	r4, r0
  i2c_write(ina219, INA219_REG_CALIBRATION, calibration_val);
 8000e00:	4622      	mov	r2, r4
 8000e02:	2105      	movs	r1, #5
 8000e04:	4628      	mov	r0, r5
 8000e06:	f7ff ff8d 	bl	8000d24 <i2c_write>
  if(i2c_read(ina219, INA219_REG_CALIBRATION) == (calibration_val & 0xFFFE))
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f7ff ff03 	bl	8000c18 <i2c_read>
 8000e12:	f024 0401 	bic.w	r4, r4, #1
 8000e16:	4284      	cmp	r4, r0
 8000e18:	d003      	beq.n	8000e22 <ina219_calibrate+0x52>
  return false;
 8000e1a:	2000      	movs	r0, #0
}
 8000e1c:	ecbd 8b02 	vpop	{d8}
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
    current_lsb = temp_current_lsb;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <ina219_calibrate+0x6c>)
 8000e24:	ed83 8a00 	vstr	s16, [r3]
    return true;
 8000e28:	2001      	movs	r0, #1
 8000e2a:	e7f7      	b.n	8000e1c <ina219_calibrate+0x4c>
 8000e2c:	f3af 8000 	nop.w
 8000e30:	88e368f1 	.word	0x88e368f1
 8000e34:	3fa4f8b5 	.word	0x3fa4f8b5
 8000e38:	38000000 	.word	0x38000000
 8000e3c:	200000d8 	.word	0x200000d8

08000e40 <ina219_configure>:
{
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4605      	mov	r5, r0
 8000e44:	460c      	mov	r4, r1
  i2c_write(ina219, INA219_REG_CONFIGURATION, val);
 8000e46:	460a      	mov	r2, r1
 8000e48:	2100      	movs	r1, #0
 8000e4a:	f7ff ff6b 	bl	8000d24 <i2c_write>
  if(i2c_read(ina219, INA219_REG_CONFIGURATION) == val)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4628      	mov	r0, r5
 8000e52:	f7ff fee1 	bl	8000c18 <i2c_read>
 8000e56:	42a0      	cmp	r0, r4
 8000e58:	d001      	beq.n	8000e5e <ina219_configure+0x1e>
  return false;
 8000e5a:	2000      	movs	r0, #0
}
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
    config_val = val;
 8000e5e:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <ina219_configure+0x28>)
 8000e60:	801c      	strh	r4, [r3, #0]
    return true;
 8000e62:	2001      	movs	r0, #1
 8000e64:	e7fa      	b.n	8000e5c <ina219_configure+0x1c>
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000

08000e6c <_write>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

int _write(int file, char *data, int len)
{
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	b292      	uxth	r2, r2
 8000e76:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <_write+0x14>)
 8000e78:	f001 fdb5 	bl	80029e6 <HAL_UART_Transmit>
  return len;
}
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	bd10      	pop	{r4, pc}
 8000e80:	200000ec 	.word	0x200000ec

08000e84 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <Error_Handler+0x2>

08000e88 <SystemClock_Config>:
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8c:	ac08      	add	r4, sp, #32
 8000e8e:	2230      	movs	r2, #48	@ 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4620      	mov	r0, r4
 8000e94:	f002 f8e8 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9303      	str	r3, [sp, #12]
 8000e9c:	9304      	str	r3, [sp, #16]
 8000e9e:	9305      	str	r3, [sp, #20]
 8000ea0:	9306      	str	r3, [sp, #24]
 8000ea2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <SystemClock_Config+0x80>)
 8000ea8:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000eaa:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000eae:	6411      	str	r1, [r2, #64]	@ 0x40
 8000eb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000eb2:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	4a13      	ldr	r2, [pc, #76]	@ (8000f0c <SystemClock_Config+0x84>)
 8000ebe:	6811      	ldr	r1, [r2, #0]
 8000ec0:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8000ec4:	6011      	str	r1, [r2, #0]
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ecc:	9202      	str	r2, [sp, #8]
 8000ece:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ed8:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eda:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	4620      	mov	r0, r4
 8000ede:	f001 f933 	bl	8002148 <HAL_RCC_OscConfig>
 8000ee2:	b968      	cbnz	r0, 8000f00 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2100      	movs	r1, #0
 8000eee:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef4:	a803      	add	r0, sp, #12
 8000ef6:	f001 fb77 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000efa:	b918      	cbnz	r0, 8000f04 <SystemClock_Config+0x7c>
}
 8000efc:	b014      	add	sp, #80	@ 0x50
 8000efe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f00:	f7ff ffc0 	bl	8000e84 <Error_Handler>
    Error_Handler();
 8000f04:	f7ff ffbe 	bl	8000e84 <Error_Handler>
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <main>:
{
 8000f10:	b530      	push	{r4, r5, lr}
 8000f12:	ed2d 8b0a 	vpush	{d8-d12}
 8000f16:	b083      	sub	sp, #12
  HAL_Init();
 8000f18:	f000 f920 	bl	800115c <HAL_Init>
  SystemClock_Config();
 8000f1c:	f7ff ffb4 	bl	8000e88 <SystemClock_Config>
  MX_GPIO_Init();
 8000f20:	f7ff fdfe 	bl	8000b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f24:	f001 fe1a 	bl	8002b5c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000f28:	f7ff fe20 	bl	8000b6c <MX_I2C2_Init>
 printf("Scanning I2C bus...\n");
 8000f2c:	4865      	ldr	r0, [pc, #404]	@ (80010c4 <main+0x1b4>)
 8000f2e:	f001 ffbd 	bl	8002eac <puts>
  for(uint8_t addr = 1; addr < 127; addr++)
 8000f32:	2401      	movs	r4, #1
 8000f34:	e001      	b.n	8000f3a <main+0x2a>
 8000f36:	3401      	adds	r4, #1
 8000f38:	b2e4      	uxtb	r4, r4
 8000f3a:	2c7e      	cmp	r4, #126	@ 0x7e
 8000f3c:	d80d      	bhi.n	8000f5a <main+0x4a>
    if(HAL_I2C_IsDeviceReady(&hi2c2, addr << 1, 1, 10) == HAL_OK)
 8000f3e:	230a      	movs	r3, #10
 8000f40:	2201      	movs	r2, #1
 8000f42:	fa04 f102 	lsl.w	r1, r4, r2
 8000f46:	4860      	ldr	r0, [pc, #384]	@ (80010c8 <main+0x1b8>)
 8000f48:	f001 f81c 	bl	8001f84 <HAL_I2C_IsDeviceReady>
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d1f2      	bne.n	8000f36 <main+0x26>
      printf("Device found at 0x%02X\n", addr);
 8000f50:	4621      	mov	r1, r4
 8000f52:	485e      	ldr	r0, [pc, #376]	@ (80010cc <main+0x1bc>)
 8000f54:	f001 ff42 	bl	8002ddc <iprintf>
 8000f58:	e7ed      	b.n	8000f36 <main+0x26>
  printf("Starting INA219 test...\n");
 8000f5a:	485d      	ldr	r0, [pc, #372]	@ (80010d0 <main+0x1c0>)
 8000f5c:	f001 ffa6 	bl	8002eac <puts>
  ina1.address = 0x40;
 8000f60:	485c      	ldr	r0, [pc, #368]	@ (80010d4 <main+0x1c4>)
 8000f62:	2340      	movs	r3, #64	@ 0x40
 8000f64:	7003      	strb	r3, [r0, #0]
  if(ina219_init(&ina1)){
 8000f66:	f7ff ff2d 	bl	8000dc4 <ina219_init>
 8000f6a:	b1f8      	cbz	r0, 8000fac <main+0x9c>
    printf("INA219 at 0x40 init success.\n");
 8000f6c:	485a      	ldr	r0, [pc, #360]	@ (80010d8 <main+0x1c8>)
 8000f6e:	f001 ff9d 	bl	8002eac <puts>
  ina2.address = 0x41;
 8000f72:	485a      	ldr	r0, [pc, #360]	@ (80010dc <main+0x1cc>)
 8000f74:	2341      	movs	r3, #65	@ 0x41
 8000f76:	7003      	strb	r3, [r0, #0]
  if(ina219_init(&ina2)){
 8000f78:	f7ff ff24 	bl	8000dc4 <ina219_init>
 8000f7c:	b1d0      	cbz	r0, 8000fb4 <main+0xa4>
    printf("INA219 at 0x41 init success.\n");
 8000f7e:	4858      	ldr	r0, [pc, #352]	@ (80010e0 <main+0x1d0>)
 8000f80:	f001 ff94 	bl	8002eac <puts>
  const bool status_cal = ina219_calibrate( &ina1 ,max_current, r_shunt);
 8000f84:	4d53      	ldr	r5, [pc, #332]	@ (80010d4 <main+0x1c4>)
 8000f86:	eddf 0a57 	vldr	s1, [pc, #348]	@ 80010e4 <main+0x1d4>
 8000f8a:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8000f8e:	4628      	mov	r0, r5
 8000f90:	f7ff ff1e 	bl	8000dd0 <ina219_calibrate>
 8000f94:	4604      	mov	r4, r0
  const bool status_config = ina219_configure(&ina1, config_val);
 8000f96:	f641 119f 	movw	r1, #6559	@ 0x199f
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	f7ff ff50 	bl	8000e40 <ina219_configure>
  if (status_cal && status_config)
 8000fa0:	b104      	cbz	r4, 8000fa4 <main+0x94>
 8000fa2:	b958      	cbnz	r0, 8000fbc <main+0xac>
    printf("Configuration error of ina1!\r\n");
 8000fa4:	4850      	ldr	r0, [pc, #320]	@ (80010e8 <main+0x1d8>)
 8000fa6:	f001 ff81 	bl	8002eac <puts>
    while (1);
 8000faa:	e7fe      	b.n	8000faa <main+0x9a>
    printf("INA219 at 0x40 init failed.\n");}
 8000fac:	484f      	ldr	r0, [pc, #316]	@ (80010ec <main+0x1dc>)
 8000fae:	f001 ff7d 	bl	8002eac <puts>
 8000fb2:	e7de      	b.n	8000f72 <main+0x62>
    printf("INA219 at 0x41 init failed.\n");
 8000fb4:	484e      	ldr	r0, [pc, #312]	@ (80010f0 <main+0x1e0>)
 8000fb6:	f001 ff79 	bl	8002eac <puts>
 8000fba:	e7e3      	b.n	8000f84 <main+0x74>
    printf("Successful configuration of ina1!\r\n");
 8000fbc:	484d      	ldr	r0, [pc, #308]	@ (80010f4 <main+0x1e4>)
 8000fbe:	f001 ff75 	bl	8002eac <puts>
  const bool status_cal2 = ina219_calibrate( &ina2 ,max_current, r_shunt);
 8000fc2:	4d46      	ldr	r5, [pc, #280]	@ (80010dc <main+0x1cc>)
 8000fc4:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80010e4 <main+0x1d4>
 8000fc8:	eeb0 0a04 	vmov.f32	s0, #4	@ 0x40200000  2.5
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f7ff feff 	bl	8000dd0 <ina219_calibrate>
 8000fd2:	4604      	mov	r4, r0
  const bool status_config2 = ina219_configure(&ina2, config_val2);
 8000fd4:	f641 119f 	movw	r1, #6559	@ 0x199f
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f7ff ff31 	bl	8000e40 <ina219_configure>
  if (status_cal2 && status_config2)
 8000fde:	b104      	cbz	r4, 8000fe2 <main+0xd2>
 8000fe0:	b918      	cbnz	r0, 8000fea <main+0xda>
    printf("Configuration error of ina2!\r\n");
 8000fe2:	4845      	ldr	r0, [pc, #276]	@ (80010f8 <main+0x1e8>)
 8000fe4:	f001 ff62 	bl	8002eac <puts>
    while (1);
 8000fe8:	e7fe      	b.n	8000fe8 <main+0xd8>
    printf("Successful configuration of ina2!\r\n");
 8000fea:	4844      	ldr	r0, [pc, #272]	@ (80010fc <main+0x1ec>)
 8000fec:	f001 ff5e 	bl	8002eac <puts>
    float bus_v1 = ina219_get_bus_voltage(&ina1);
 8000ff0:	4c38      	ldr	r4, [pc, #224]	@ (80010d4 <main+0x1c4>)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f7ff fe38 	bl	8000c68 <ina219_get_bus_voltage>
 8000ff8:	eeb0 aa40 	vmov.f32	s20, s0
    float shunt_v1 = ina219_get_shunt_voltage(&ina1);
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff fe5f 	bl	8000cc0 <ina219_get_shunt_voltage>
 8001002:	eef0 aa40 	vmov.f32	s21, s0
    float current1 = ina219_get_current(&ina1);
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff fe46 	bl	8000c98 <ina219_get_current>
 800100c:	eeb0 ba40 	vmov.f32	s22, s0
    float power1 = ina219_get_power(&ina1);
 8001010:	4620      	mov	r0, r4
 8001012:	f7ff fe71 	bl	8000cf8 <ina219_get_power>
 8001016:	eeb0 9a40 	vmov.f32	s18, s0
    float bus_v2 = ina219_get_bus_voltage(&ina2);
 800101a:	4c30      	ldr	r4, [pc, #192]	@ (80010dc <main+0x1cc>)
 800101c:	4620      	mov	r0, r4
 800101e:	f7ff fe23 	bl	8000c68 <ina219_get_bus_voltage>
 8001022:	eef0 9a40 	vmov.f32	s19, s0
    float shunt_v2 = ina219_get_shunt_voltage(&ina2);
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff fe4a 	bl	8000cc0 <ina219_get_shunt_voltage>
 800102c:	eef0 ba40 	vmov.f32	s23, s0
    float current2 = ina219_get_current(&ina2);
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fe31 	bl	8000c98 <ina219_get_current>
 8001036:	eeb0 ca40 	vmov.f32	s24, s0
    float power2 = ina219_get_power(&ina2);
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fe5c 	bl	8000cf8 <ina219_get_power>
 8001040:	eef0 8a40 	vmov.f32	s17, s0
    printf("INA1 (0x40): Bus=%iV Shunt=%iV Current=%iA Power=%iW\n", (int)(bus_v1 *1000) ,(int)( shunt_v1 *1000) ,(int)( current1 *1000),(int)( power1 *1000));
 8001044:	ed9f 8a2e 	vldr	s16, [pc, #184]	@ 8001100 <main+0x1f0>
 8001048:	ee2a aa08 	vmul.f32	s20, s20, s16
 800104c:	ee6a aa88 	vmul.f32	s21, s21, s16
 8001050:	ee2b ba08 	vmul.f32	s22, s22, s16
 8001054:	ee29 9a08 	vmul.f32	s18, s18, s16
 8001058:	eebd 9ac9 	vcvt.s32.f32	s18, s18
 800105c:	ed8d 9a00 	vstr	s18, [sp]
 8001060:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8001064:	ee17 3a90 	vmov	r3, s15
 8001068:	eefd 7aea 	vcvt.s32.f32	s15, s21
 800106c:	ee17 2a90 	vmov	r2, s15
 8001070:	eefd 7aca 	vcvt.s32.f32	s15, s20
 8001074:	ee17 1a90 	vmov	r1, s15
 8001078:	4822      	ldr	r0, [pc, #136]	@ (8001104 <main+0x1f4>)
 800107a:	f001 feaf 	bl	8002ddc <iprintf>
    printf("INA2 (0x41): Bus=%iV Shunt=%iV Current=%iA Power=%iW\n", (int)(bus_v2 *1000) ,(int)( shunt_v2 *1000) ,(int)( current2 *1000),(int)( power2 *1000));
 800107e:	ee69 9a88 	vmul.f32	s19, s19, s16
 8001082:	ee6b ba88 	vmul.f32	s23, s23, s16
 8001086:	ee2c ca08 	vmul.f32	s24, s24, s16
 800108a:	ee68 8a88 	vmul.f32	s17, s17, s16
 800108e:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8001092:	edcd 8a00 	vstr	s17, [sp]
 8001096:	eefd 7acc 	vcvt.s32.f32	s15, s24
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80010a2:	ee17 2a90 	vmov	r2, s15
 80010a6:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80010aa:	ee17 1a90 	vmov	r1, s15
 80010ae:	4816      	ldr	r0, [pc, #88]	@ (8001108 <main+0x1f8>)
 80010b0:	f001 fe94 	bl	8002ddc <iprintf>
    printf("-------------------------------------------\n");
 80010b4:	4815      	ldr	r0, [pc, #84]	@ (800110c <main+0x1fc>)
 80010b6:	f001 fef9 	bl	8002eac <puts>
    HAL_Delay(1000);
 80010ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010be:	f000 f879 	bl	80011b4 <HAL_Delay>
  while (1)
 80010c2:	e795      	b.n	8000ff0 <main+0xe0>
 80010c4:	08003ec0 	.word	0x08003ec0
 80010c8:	20000084 	.word	0x20000084
 80010cc:	08003ed4 	.word	0x08003ed4
 80010d0:	08003eec 	.word	0x08003eec
 80010d4:	200000e0 	.word	0x200000e0
 80010d8:	08003f04 	.word	0x08003f04
 80010dc:	200000dc 	.word	0x200000dc
 80010e0:	08003f40 	.word	0x08003f40
 80010e4:	3dcccccd 	.word	0x3dcccccd
 80010e8:	08003fa0 	.word	0x08003fa0
 80010ec:	08003f24 	.word	0x08003f24
 80010f0:	08003f60 	.word	0x08003f60
 80010f4:	08003f7c 	.word	0x08003f7c
 80010f8:	08003fe4 	.word	0x08003fe4
 80010fc:	08003fc0 	.word	0x08003fc0
 8001100:	447a0000 	.word	0x447a0000
 8001104:	08004004 	.word	0x08004004
 8001108:	0800403c 	.word	0x0800403c
 800110c:	08004074 	.word	0x08004074

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b510      	push	{r4, lr}
 8001112:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_InitTick+0x40>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001120:	4a0c      	ldr	r2, [pc, #48]	@ (8001154 <HAL_InitTick+0x44>)
 8001122:	6810      	ldr	r0, [r2, #0]
 8001124:	fbb0 f0f3 	udiv	r0, r0, r3
 8001128:	f000 f8ae 	bl	8001288 <HAL_SYSTICK_Config>
 800112c:	b968      	cbnz	r0, 800114a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	2c0f      	cmp	r4, #15
 8001130:	d901      	bls.n	8001136 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	e00a      	b.n	800114c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	2200      	movs	r2, #0
 8001138:	4621      	mov	r1, r4
 800113a:	f04f 30ff 	mov.w	r0, #4294967295
 800113e:	f000 f893 	bl	8001268 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001142:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_InitTick+0x48>)
 8001144:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2000      	movs	r0, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
}
 800114c:	bd10      	pop	{r4, pc}
 800114e:	bf00      	nop
 8001150:	20000002 	.word	0x20000002
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_Init>:
{
 800115c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_Init+0x30>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001166:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800116e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001176:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f863 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f7ff ffc6 	bl	8001110 <HAL_InitTick>
  HAL_MspInit();
 8001184:	f000 ffc4 	bl	8002110 <HAL_MspInit>
}
 8001188:	2000      	movs	r0, #0
 800118a:	bd08      	pop	{r3, pc}
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001190:	4a03      	ldr	r2, [pc, #12]	@ (80011a0 <HAL_IncTick+0x10>)
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <HAL_IncTick+0x14>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	440b      	add	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200000e4 	.word	0x200000e4
 80011a4:	20000002 	.word	0x20000002

080011a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011a8:	4b01      	ldr	r3, [pc, #4]	@ (80011b0 <HAL_GetTick+0x8>)
 80011aa:	6818      	ldr	r0, [r3, #0]
}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200000e4 	.word	0x200000e4

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff fff6 	bl	80011a8 <HAL_GetTick>
 80011bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	f1b4 3fff 	cmp.w	r4, #4294967295
 80011c2:	d002      	beq.n	80011ca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <HAL_Delay+0x24>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	f7ff ffed 	bl	80011a8 <HAL_GetTick>
 80011ce:	1b40      	subs	r0, r0, r5
 80011d0:	42a0      	cmp	r0, r4
 80011d2:	d3fa      	bcc.n	80011ca <HAL_Delay+0x16>
  {
  }
}
 80011d4:	bd38      	pop	{r3, r4, r5, pc}
 80011d6:	bf00      	nop
 80011d8:	20000002 	.word	0x20000002

080011dc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80011dc:	2800      	cmp	r0, #0
 80011de:	db08      	blt.n	80011f2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	0109      	lsls	r1, r1, #4
 80011e2:	b2c9      	uxtb	r1, r1
 80011e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80011e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80011ec:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80011f0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	f000 000f 	and.w	r0, r0, #15
 80011f6:	0109      	lsls	r1, r1, #4
 80011f8:	b2c9      	uxtb	r1, r1
 80011fa:	4b01      	ldr	r3, [pc, #4]	@ (8001200 <__NVIC_SetPriority+0x24>)
 80011fc:	5419      	strb	r1, [r3, r0]
  }
}
 80011fe:	4770      	bx	lr
 8001200:	e000ed14 	.word	0xe000ed14

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001206:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120a:	f1c0 0c07 	rsb	ip, r0, #7
 800120e:	f1bc 0f04 	cmp.w	ip, #4
 8001212:	bf28      	it	cs
 8001214:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001218:	1d03      	adds	r3, r0, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d90f      	bls.n	800123e <NVIC_EncodePriority+0x3a>
 800121e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 3eff 	mov.w	lr, #4294967295
 8001224:	fa0e f00c 	lsl.w	r0, lr, ip
 8001228:	ea21 0100 	bic.w	r1, r1, r0
 800122c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001232:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001236:	ea41 0002 	orr.w	r0, r1, r2
 800123a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	2300      	movs	r3, #0
 8001240:	e7ee      	b.n	8001220 <NVIC_EncodePriority+0x1c>
	...

08001244 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001246:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001248:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	0200      	lsls	r0, r0, #8
 8001252:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001256:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001260:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001268:	b510      	push	{r4, lr}
 800126a:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b05      	ldr	r3, [pc, #20]	@ (8001284 <HAL_NVIC_SetPriority+0x1c>)
 800126e:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001270:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001274:	f7ff ffc6 	bl	8001204 <NVIC_EncodePriority>
 8001278:	4601      	mov	r1, r0
 800127a:	4620      	mov	r0, r4
 800127c:	f7ff ffae 	bl	80011dc <__NVIC_SetPriority>
}
 8001280:	bd10      	pop	{r4, pc}
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	3801      	subs	r0, #1
 800128a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800128e:	d20b      	bcs.n	80012a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001290:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001294:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_SYSTICK_Config+0x24>)
 8001298:	21f0      	movs	r1, #240	@ 0xf0
 800129a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129e:	2000      	movs	r0, #0
 80012a0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	2207      	movs	r2, #7
 80012a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f200 80e9 	bhi.w	800148a <HAL_GPIO_Init+0x1da>
{
 80012b8:	b570      	push	{r4, r5, r6, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	e065      	b.n	800138a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80012c4:	2403      	movs	r4, #3
 80012c6:	fa04 f40e 	lsl.w	r4, r4, lr
 80012ca:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ce:	68cc      	ldr	r4, [r1, #12]
 80012d0:	fa04 f40e 	lsl.w	r4, r4, lr
 80012d4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80012d6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012da:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	684a      	ldr	r2, [r1, #4]
 80012e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80012e8:	6042      	str	r2, [r0, #4]
 80012ea:	e05c      	b.n	80013a6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ec:	08dc      	lsrs	r4, r3, #3
 80012ee:	3408      	adds	r4, #8
 80012f0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f4:	f003 0507 	and.w	r5, r3, #7
 80012f8:	00ad      	lsls	r5, r5, #2
 80012fa:	f04f 0e0f 	mov.w	lr, #15
 80012fe:	fa0e fe05 	lsl.w	lr, lr, r5
 8001302:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001306:	690a      	ldr	r2, [r1, #16]
 8001308:	40aa      	lsls	r2, r5
 800130a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001312:	e05c      	b.n	80013ce <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001314:	2207      	movs	r2, #7
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x6a>
 8001318:	2200      	movs	r2, #0
 800131a:	fa02 f20e 	lsl.w	r2, r2, lr
 800131e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	3402      	adds	r4, #2
 8001322:	4d5a      	ldr	r5, [pc, #360]	@ (800148c <HAL_GPIO_Init+0x1dc>)
 8001324:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001328:	4a59      	ldr	r2, [pc, #356]	@ (8001490 <HAL_GPIO_Init+0x1e0>)
 800132a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800132c:	ea6f 020c 	mvn.w	r2, ip
 8001330:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001334:	684e      	ldr	r6, [r1, #4]
 8001336:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800133a:	d001      	beq.n	8001340 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800133c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001340:	4c53      	ldr	r4, [pc, #332]	@ (8001490 <HAL_GPIO_Init+0x1e0>)
 8001342:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001344:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001346:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134a:	684e      	ldr	r6, [r1, #4]
 800134c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001350:	d001      	beq.n	8001356 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001352:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001356:	4c4e      	ldr	r4, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x1e0>)
 8001358:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800135a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800135c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001360:	684e      	ldr	r6, [r1, #4]
 8001362:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001366:	d001      	beq.n	800136c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001368:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 800136c:	4c48      	ldr	r4, [pc, #288]	@ (8001490 <HAL_GPIO_Init+0x1e0>)
 800136e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001372:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	684d      	ldr	r5, [r1, #4]
 8001376:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800137a:	d001      	beq.n	8001380 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 800137c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001380:	4c43      	ldr	r4, [pc, #268]	@ (8001490 <HAL_GPIO_Init+0x1e0>)
 8001382:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001384:	3301      	adds	r3, #1
 8001386:	2b0f      	cmp	r3, #15
 8001388:	d87d      	bhi.n	8001486 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800138a:	2201      	movs	r2, #1
 800138c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	680c      	ldr	r4, [r1, #0]
 8001390:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001394:	ea32 0404 	bics.w	r4, r2, r4
 8001398:	d1f4      	bne.n	8001384 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	684c      	ldr	r4, [r1, #4]
 800139c:	f004 0403 	and.w	r4, r4, #3
 80013a0:	3c01      	subs	r4, #1
 80013a2:	2c01      	cmp	r4, #1
 80013a4:	d98b      	bls.n	80012be <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a6:	684a      	ldr	r2, [r1, #4]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	2a03      	cmp	r2, #3
 80013ae:	d009      	beq.n	80013c4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 80013b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	005d      	lsls	r5, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	40aa      	lsls	r2, r5
 80013b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	688a      	ldr	r2, [r1, #8]
 80013be:	40aa      	lsls	r2, r5
 80013c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80013c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	684a      	ldr	r2, [r1, #4]
 80013c6:	f002 0203 	and.w	r2, r2, #3
 80013ca:	2a02      	cmp	r2, #2
 80013cc:	d08e      	beq.n	80012ec <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 80013ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f20e 	lsl.w	r2, r2, lr
 80013da:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013de:	684a      	ldr	r2, [r1, #4]
 80013e0:	f002 0203 	and.w	r2, r2, #3
 80013e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80013e8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80013ea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ec:	684a      	ldr	r2, [r1, #4]
 80013ee:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80013f2:	d0c7      	beq.n	8001384 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	2200      	movs	r2, #0
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	4a26      	ldr	r2, [pc, #152]	@ (8001494 <HAL_GPIO_Init+0x1e4>)
 80013fa:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80013fc:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001400:	6454      	str	r4, [r2, #68]	@ 0x44
 8001402:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001404:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001408:	9201      	str	r2, [sp, #4]
 800140a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800140c:	089c      	lsrs	r4, r3, #2
 800140e:	1ca5      	adds	r5, r4, #2
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <HAL_GPIO_Init+0x1dc>)
 8001412:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001416:	f003 0e03 	and.w	lr, r3, #3
 800141a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f20e 	lsl.w	r2, r2, lr
 8001424:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <HAL_GPIO_Init+0x1e8>)
 800142a:	4290      	cmp	r0, r2
 800142c:	f43f af74 	beq.w	8001318 <HAL_GPIO_Init+0x68>
 8001430:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001434:	4290      	cmp	r0, r2
 8001436:	d01a      	beq.n	800146e <HAL_GPIO_Init+0x1be>
 8001438:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800143c:	4290      	cmp	r0, r2
 800143e:	d018      	beq.n	8001472 <HAL_GPIO_Init+0x1c2>
 8001440:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001444:	4290      	cmp	r0, r2
 8001446:	d016      	beq.n	8001476 <HAL_GPIO_Init+0x1c6>
 8001448:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800144c:	4290      	cmp	r0, r2
 800144e:	d014      	beq.n	800147a <HAL_GPIO_Init+0x1ca>
 8001450:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001454:	4290      	cmp	r0, r2
 8001456:	d012      	beq.n	800147e <HAL_GPIO_Init+0x1ce>
 8001458:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800145c:	4290      	cmp	r0, r2
 800145e:	d010      	beq.n	8001482 <HAL_GPIO_Init+0x1d2>
 8001460:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001464:	4290      	cmp	r0, r2
 8001466:	f43f af55 	beq.w	8001314 <HAL_GPIO_Init+0x64>
 800146a:	2208      	movs	r2, #8
 800146c:	e755      	b.n	800131a <HAL_GPIO_Init+0x6a>
 800146e:	2201      	movs	r2, #1
 8001470:	e753      	b.n	800131a <HAL_GPIO_Init+0x6a>
 8001472:	2202      	movs	r2, #2
 8001474:	e751      	b.n	800131a <HAL_GPIO_Init+0x6a>
 8001476:	2203      	movs	r2, #3
 8001478:	e74f      	b.n	800131a <HAL_GPIO_Init+0x6a>
 800147a:	2204      	movs	r2, #4
 800147c:	e74d      	b.n	800131a <HAL_GPIO_Init+0x6a>
 800147e:	2205      	movs	r2, #5
 8001480:	e74b      	b.n	800131a <HAL_GPIO_Init+0x6a>
 8001482:	2206      	movs	r2, #6
 8001484:	e749      	b.n	800131a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001486:	b002      	add	sp, #8
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	4770      	bx	lr
 800148c:	40013800 	.word	0x40013800
 8001490:	40013c00 	.word	0x40013c00
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80014a4:	d101      	bne.n	80014aa <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80014a6:	2000      	movs	r0, #0
}
 80014a8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80014ae:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014b4:	2220      	movs	r2, #32
 80014b6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014ba:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014be:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80014c6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
 80014cc:	4770      	bx	lr

080014ce <I2C_WaitOnFlagUntilTimeout>:
{
 80014ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d2:	4606      	mov	r6, r0
 80014d4:	460c      	mov	r4, r1
 80014d6:	4617      	mov	r7, r2
 80014d8:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014da:	e03b      	b.n	8001554 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014dc:	f7ff fe64 	bl	80011a8 <HAL_GetTick>
 80014e0:	9b06      	ldr	r3, [sp, #24]
 80014e2:	1ac0      	subs	r0, r0, r3
 80014e4:	4540      	cmp	r0, r8
 80014e6:	d802      	bhi.n	80014ee <I2C_WaitOnFlagUntilTimeout+0x20>
 80014e8:	f1b8 0f00 	cmp.w	r8, #0
 80014ec:	d132      	bne.n	8001554 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014ee:	2d01      	cmp	r5, #1
 80014f0:	d018      	beq.n	8001524 <I2C_WaitOnFlagUntilTimeout+0x56>
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	ea24 0303 	bic.w	r3, r4, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	429f      	cmp	r7, r3
 8001504:	d126      	bne.n	8001554 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800150a:	2220      	movs	r2, #32
 800150c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001510:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001514:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800151c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	e027      	b.n	8001574 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	ea24 0303 	bic.w	r3, r4, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	fab3 f383 	clz	r3, r3
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	e7e5      	b.n	8001502 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001536:	6833      	ldr	r3, [r6, #0]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	ea24 0c03 	bic.w	ip, r4, r3
 800153e:	fa1f fc8c 	uxth.w	ip, ip
 8001542:	fabc fc8c 	clz	ip, ip
 8001546:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800154a:	4567      	cmp	r7, ip
 800154c:	d111      	bne.n	8001572 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800154e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001552:	d1c3      	bne.n	80014dc <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001554:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001558:	2d01      	cmp	r5, #1
 800155a:	d0ec      	beq.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x68>
 800155c:	6833      	ldr	r3, [r6, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	ea24 0c03 	bic.w	ip, r4, r3
 8001564:	fa1f fc8c 	uxth.w	ip, ip
 8001568:	fabc fc8c 	clz	ip, ip
 800156c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001570:	e7eb      	b.n	800154a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001572:	2000      	movs	r0, #0
}
 8001574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800157c:	4605      	mov	r5, r0
 800157e:	460e      	mov	r6, r1
 8001580:	4690      	mov	r8, r2
 8001582:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001584:	e053      	b.n	800162e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800158c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800158e:	682b      	ldr	r3, [r5, #0]
 8001590:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001594:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001596:	2300      	movs	r3, #0
 8001598:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800159a:	2220      	movs	r2, #32
 800159c:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a0:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015a4:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80015a6:	f042 0204 	orr.w	r2, r2, #4
 80015aa:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80015ac:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
 80015b2:	e04a      	b.n	800164a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b4:	f7ff fdf8 	bl	80011a8 <HAL_GetTick>
 80015b8:	eba0 0009 	sub.w	r0, r0, r9
 80015bc:	4540      	cmp	r0, r8
 80015be:	d802      	bhi.n	80015c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80015c0:	f1b8 0f00 	cmp.w	r8, #0
 80015c4:	d133      	bne.n	800162e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80015c6:	2f01      	cmp	r7, #1
 80015c8:	d017      	beq.n	80015fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	ea26 0303 	bic.w	r3, r6, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b00      	subs	r3, #0
 80015d6:	bf18      	it	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	b343      	cbz	r3, 800162e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015dc:	2300      	movs	r3, #0
 80015de:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015e0:	2220      	movs	r2, #32
 80015e2:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015e6:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015ea:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80015ec:	f042 0220 	orr.w	r2, r2, #32
 80015f0:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80015f2:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
 80015f8:	e027      	b.n	800164a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80015fa:	682b      	ldr	r3, [r5, #0]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	ea26 0303 	bic.w	r3, r6, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	3b00      	subs	r3, #0
 8001606:	bf18      	it	ne
 8001608:	2301      	movne	r3, #1
 800160a:	e7e6      	b.n	80015da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	699c      	ldr	r4, [r3, #24]
 8001610:	ea26 0404 	bic.w	r4, r6, r4
 8001614:	b2a4      	uxth	r4, r4
 8001616:	3c00      	subs	r4, #0
 8001618:	bf18      	it	ne
 800161a:	2401      	movne	r4, #1
 800161c:	b1a4      	cbz	r4, 8001648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001626:	d1ae      	bne.n	8001586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001628:	f1b8 3fff 	cmp.w	r8, #4294967295
 800162c:	d1c2      	bne.n	80015b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800162e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8001632:	2f01      	cmp	r7, #1
 8001634:	d1ea      	bne.n	800160c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	695c      	ldr	r4, [r3, #20]
 800163a:	ea26 0404 	bic.w	r4, r6, r4
 800163e:	b2a4      	uxth	r4, r4
 8001640:	3c00      	subs	r4, #0
 8001642:	bf18      	it	ne
 8001644:	2401      	movne	r4, #1
 8001646:	e7e9      	b.n	800161c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
}
 800164a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08001650 <I2C_MasterRequestWrite>:
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b083      	sub	sp, #12
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	4616      	mov	r6, r2
 800165a:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800165c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800165e:	2b08      	cmp	r3, #8
 8001660:	d00d      	beq.n	800167e <I2C_MasterRequestWrite+0x2e>
 8001662:	2b01      	cmp	r3, #1
 8001664:	d00b      	beq.n	800167e <I2C_MasterRequestWrite+0x2e>
 8001666:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800166a:	d008      	beq.n	800167e <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800166c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800166e:	2b12      	cmp	r3, #18
 8001670:	d10a      	bne.n	8001688 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001672:	6802      	ldr	r2, [r0, #0]
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e004      	b.n	8001688 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001686:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001688:	9700      	str	r7, [sp, #0]
 800168a:	4633      	mov	r3, r6
 800168c:	2200      	movs	r2, #0
 800168e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff ff1b 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001698:	b980      	cbnz	r0, 80016bc <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800169a:	6923      	ldr	r3, [r4, #16]
 800169c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016a0:	d116      	bne.n	80016d0 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80016a8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4632      	mov	r2, r6
 80016ae:	4913      	ldr	r1, [pc, #76]	@ (80016fc <I2C_MasterRequestWrite+0xac>)
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff ff61 	bl	8001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016b6:	b9f8      	cbnz	r0, 80016f8 <I2C_MasterRequestWrite+0xa8>
}
 80016b8:	b003      	add	sp, #12
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80016c4:	d002      	beq.n	80016cc <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ca:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80016cc:	2003      	movs	r0, #3
 80016ce:	e7f3      	b.n	80016b8 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016d0:	11eb      	asrs	r3, r5, #7
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	f003 0306 	and.w	r3, r3, #6
 80016d8:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80016dc:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4632      	mov	r2, r6
 80016e2:	4907      	ldr	r1, [pc, #28]	@ (8001700 <I2C_MasterRequestWrite+0xb0>)
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff47 	bl	8001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016ea:	b918      	cbnz	r0, 80016f4 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	b2ed      	uxtb	r5, r5
 80016f0:	611d      	str	r5, [r3, #16]
 80016f2:	e7da      	b.n	80016aa <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 80016f4:	2001      	movs	r0, #1
 80016f6:	e7df      	b.n	80016b8 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
 80016fa:	e7dd      	b.n	80016b8 <I2C_MasterRequestWrite+0x68>
 80016fc:	00010002 	.word	0x00010002
 8001700:	00010008 	.word	0x00010008

08001704 <I2C_MasterRequestRead>:
{
 8001704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4616      	mov	r6, r2
 8001710:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001712:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001714:	6801      	ldr	r1, [r0, #0]
 8001716:	680b      	ldr	r3, [r1, #0]
 8001718:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800171e:	2a08      	cmp	r2, #8
 8001720:	d00d      	beq.n	800173e <I2C_MasterRequestRead+0x3a>
 8001722:	2a01      	cmp	r2, #1
 8001724:	d00b      	beq.n	800173e <I2C_MasterRequestRead+0x3a>
 8001726:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800172a:	d008      	beq.n	800173e <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800172c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800172e:	2b11      	cmp	r3, #17
 8001730:	d10a      	bne.n	8001748 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001732:	6802      	ldr	r2, [r0, #0]
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e004      	b.n	8001748 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	6813      	ldr	r3, [r2, #0]
 8001742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001746:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001748:	9700      	str	r7, [sp, #0]
 800174a:	4633      	mov	r3, r6
 800174c:	2200      	movs	r2, #0
 800174e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff febb 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001758:	b998      	cbnz	r0, 8001782 <I2C_MasterRequestRead+0x7e>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800175a:	6923      	ldr	r3, [r4, #16]
 800175c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001760:	d119      	bne.n	8001796 <I2C_MasterRequestRead+0x92>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	f045 0501 	orr.w	r5, r5, #1
 8001768:	b2ed      	uxtb	r5, r5
 800176a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4632      	mov	r2, r6
 8001770:	492a      	ldr	r1, [pc, #168]	@ (800181c <I2C_MasterRequestRead+0x118>)
 8001772:	4620      	mov	r0, r4
 8001774:	f7ff ff00 	bl	8001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001778:	2800      	cmp	r0, #0
 800177a:	d14c      	bne.n	8001816 <I2C_MasterRequestRead+0x112>
}
 800177c:	b004      	add	sp, #16
 800177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800178a:	d002      	beq.n	8001792 <I2C_MasterRequestRead+0x8e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800178c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001790:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001792:	2003      	movs	r0, #3
 8001794:	e7f2      	b.n	800177c <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001796:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800179a:	f008 0806 	and.w	r8, r8, #6
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 80017a4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017a6:	463b      	mov	r3, r7
 80017a8:	4632      	mov	r2, r6
 80017aa:	491d      	ldr	r1, [pc, #116]	@ (8001820 <I2C_MasterRequestRead+0x11c>)
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fee3 	bl	8001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b2:	b108      	cbz	r0, 80017b8 <I2C_MasterRequestRead+0xb4>
      return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
 80017b6:	e7e1      	b.n	800177c <I2C_MasterRequestRead+0x78>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	b2ed      	uxtb	r5, r5
 80017bc:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4632      	mov	r2, r6
 80017c2:	4916      	ldr	r1, [pc, #88]	@ (800181c <I2C_MasterRequestRead+0x118>)
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff fed7 	bl	8001578 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017ca:	b108      	cbz	r0, 80017d0 <I2C_MasterRequestRead+0xcc>
      return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
 80017ce:	e7d5      	b.n	800177c <I2C_MasterRequestRead+0x78>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d0:	2200      	movs	r2, #0
 80017d2:	9203      	str	r2, [sp, #12]
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	6959      	ldr	r1, [r3, #20]
 80017d8:	9103      	str	r1, [sp, #12]
 80017da:	6999      	ldr	r1, [r3, #24]
 80017dc:	9103      	str	r1, [sp, #12]
 80017de:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80017e6:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e8:	9700      	str	r7, [sp, #0]
 80017ea:	4633      	mov	r3, r6
 80017ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fe6c 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 80017f6:	b920      	cbnz	r0, 8001802 <I2C_MasterRequestRead+0xfe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 80017fe:	6113      	str	r3, [r2, #16]
 8001800:	e7b4      	b.n	800176c <I2C_MasterRequestRead+0x68>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800180a:	d002      	beq.n	8001812 <I2C_MasterRequestRead+0x10e>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800180c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001810:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_TIMEOUT;
 8001812:	2003      	movs	r0, #3
 8001814:	e7b2      	b.n	800177c <I2C_MasterRequestRead+0x78>
    return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
 8001818:	e7b0      	b.n	800177c <I2C_MasterRequestRead+0x78>
 800181a:	bf00      	nop
 800181c:	00010002 	.word	0x00010002
 8001820:	00010008 	.word	0x00010008

08001824 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	4604      	mov	r4, r0
 8001828:	460d      	mov	r5, r1
 800182a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001834:	d121      	bne.n	800187a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001836:	4620      	mov	r0, r4
 8001838:	f7ff fe30 	bl	800149c <I2C_IsAcknowledgeFailed>
 800183c:	b9f8      	cbnz	r0, 800187e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800183e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001842:	d0f3      	beq.n	800182c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001844:	f7ff fcb0 	bl	80011a8 <HAL_GetTick>
 8001848:	1b80      	subs	r0, r0, r6
 800184a:	42a8      	cmp	r0, r5
 800184c:	d801      	bhi.n	8001852 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800184e:	2d00      	cmp	r5, #0
 8001850:	d1ec      	bne.n	800182c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800185a:	d1e7      	bne.n	800182c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800185c:	2300      	movs	r3, #0
 800185e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001860:	2220      	movs	r2, #32
 8001862:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001866:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800186a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800186c:	f042 0220 	orr.w	r2, r2, #32
 8001870:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001872:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8001876:	2001      	movs	r0, #1
 8001878:	e000      	b.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 800187a:	2000      	movs	r0, #0
}
 800187c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e7fc      	b.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x58>

08001882 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001882:	b570      	push	{r4, r5, r6, lr}
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f013 0f04 	tst.w	r3, #4
 8001892:	d121      	bne.n	80018d8 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff fe01 	bl	800149c <I2C_IsAcknowledgeFailed>
 800189a:	b9f8      	cbnz	r0, 80018dc <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800189c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80018a0:	d0f3      	beq.n	800188a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff fc81 	bl	80011a8 <HAL_GetTick>
 80018a6:	1b80      	subs	r0, r0, r6
 80018a8:	42a8      	cmp	r0, r5
 80018aa:	d801      	bhi.n	80018b0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80018ac:	2d00      	cmp	r5, #0
 80018ae:	d1ec      	bne.n	800188a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	f013 0f04 	tst.w	r3, #4
 80018b8:	d1e7      	bne.n	800188a <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018be:	2220      	movs	r2, #32
 80018c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80018d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
 80018d6:	e000      	b.n	80018da <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
}
 80018da:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80018dc:	2001      	movs	r0, #1
 80018de:	e7fc      	b.n	80018da <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080018e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	4604      	mov	r4, r0
 80018e4:	460d      	mov	r5, r1
 80018e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80018e8:	e014      	b.n	8001914 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ea:	f06f 0210 	mvn.w	r2, #16
 80018ee:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018f4:	2220      	movs	r2, #32
 80018f6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80018fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001900:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8001902:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
 8001908:	e025      	b.n	8001956 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001912:	d010      	beq.n	8001936 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	6958      	ldr	r0, [r3, #20]
 8001918:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800191c:	d11a      	bne.n	8001954 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800191e:	6958      	ldr	r0, [r3, #20]
 8001920:	f010 0f10 	tst.w	r0, #16
 8001924:	d1e1      	bne.n	80018ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001926:	f7ff fc3f 	bl	80011a8 <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	42a8      	cmp	r0, r5
 800192e:	d8ec      	bhi.n	800190a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8001930:	2d00      	cmp	r5, #0
 8001932:	d1ef      	bne.n	8001914 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8001934:	e7e9      	b.n	800190a <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800193a:	2220      	movs	r2, #32
 800193c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001940:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001944:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001946:	f042 0220 	orr.w	r2, r2, #32
 800194a:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800194c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8001950:	2001      	movs	r0, #1
 8001952:	e000      	b.n	8001956 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8001954:	2000      	movs	r0, #0
}
 8001956:	bd70      	pop	{r4, r5, r6, pc}

08001958 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001958:	2800      	cmp	r0, #0
 800195a:	f000 80cc 	beq.w	8001af6 <HAL_I2C_Init+0x19e>
{
 800195e:	b570      	push	{r4, r5, r6, lr}
 8001960:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001962:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001966:	2b00      	cmp	r3, #0
 8001968:	d077      	beq.n	8001a5a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800196a:	2324      	movs	r3, #36	@ 0x24
 800196c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001970:	6822      	ldr	r2, [r4, #0]
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001982:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001984:	6822      	ldr	r2, [r4, #0]
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800198c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800198e:	f000 fee1 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	4b5a      	ldr	r3, [pc, #360]	@ (8001b00 <HAL_I2C_Init+0x1a8>)
 8001996:	429a      	cmp	r2, r3
 8001998:	d864      	bhi.n	8001a64 <HAL_I2C_Init+0x10c>
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_I2C_Init+0x1ac>)
 800199c:	4298      	cmp	r0, r3
 800199e:	bf8c      	ite	hi
 80019a0:	2300      	movhi	r3, #0
 80019a2:	2301      	movls	r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80a8 	bne.w	8001afa <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80019aa:	4957      	ldr	r1, [pc, #348]	@ (8001b08 <HAL_I2C_Init+0x1b0>)
 80019ac:	fba1 3100 	umull	r3, r1, r1, r0
 80019b0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019b2:	6825      	ldr	r5, [r4, #0]
 80019b4:	686a      	ldr	r2, [r5, #4]
 80019b6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80019ba:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80019be:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019c0:	6821      	ldr	r1, [r4, #0]
 80019c2:	6a0a      	ldr	r2, [r1, #32]
 80019c4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80019c8:	6866      	ldr	r6, [r4, #4]
 80019ca:	4d4d      	ldr	r5, [pc, #308]	@ (8001b00 <HAL_I2C_Init+0x1a8>)
 80019cc:	42ae      	cmp	r6, r5
 80019ce:	d84f      	bhi.n	8001a70 <HAL_I2C_Init+0x118>
 80019d0:	3301      	adds	r3, #1
 80019d2:	4313      	orrs	r3, r2
 80019d4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d6:	6821      	ldr	r1, [r4, #0]
 80019d8:	69ca      	ldr	r2, [r1, #28]
 80019da:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80019de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019e2:	6865      	ldr	r5, [r4, #4]
 80019e4:	4b46      	ldr	r3, [pc, #280]	@ (8001b00 <HAL_I2C_Init+0x1a8>)
 80019e6:	429d      	cmp	r5, r3
 80019e8:	d84c      	bhi.n	8001a84 <HAL_I2C_Init+0x12c>
 80019ea:	1e43      	subs	r3, r0, #1
 80019ec:	006d      	lsls	r5, r5, #1
 80019ee:	fbb3 f3f5 	udiv	r3, r3, r5
 80019f2:	3301      	adds	r3, #1
 80019f4:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80019f8:	4203      	tst	r3, r0
 80019fa:	d078      	beq.n	8001aee <HAL_I2C_Init+0x196>
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	431a      	orrs	r2, r3
 8001a02:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a04:	6821      	ldr	r1, [r4, #0]
 8001a06:	680b      	ldr	r3, [r1, #0]
 8001a08:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001a0c:	69e2      	ldr	r2, [r4, #28]
 8001a0e:	6a20      	ldr	r0, [r4, #32]
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a16:	6821      	ldr	r1, [r4, #0]
 8001a18:	688b      	ldr	r3, [r1, #8]
 8001a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a22:	6922      	ldr	r2, [r4, #16]
 8001a24:	68e0      	ldr	r0, [r4, #12]
 8001a26:	4302      	orrs	r2, r0
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a2c:	6821      	ldr	r1, [r4, #0]
 8001a2e:	68cb      	ldr	r3, [r1, #12]
 8001a30:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a34:	6962      	ldr	r2, [r4, #20]
 8001a36:	69a0      	ldr	r0, [r4, #24]
 8001a38:	4302      	orrs	r2, r0
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	6813      	ldr	r3, [r2, #0]
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a52:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001a5a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001a5e:	f7ff f8a3 	bl	8000ba8 <HAL_I2C_MspInit>
 8001a62:	e782      	b.n	800196a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <HAL_I2C_Init+0x1b4>)
 8001a66:	4298      	cmp	r0, r3
 8001a68:	bf8c      	ite	hi
 8001a6a:	2300      	movhi	r3, #0
 8001a6c:	2301      	movls	r3, #1
 8001a6e:	e799      	b.n	80019a4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a70:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001a74:	fb05 f303 	mul.w	r3, r5, r3
 8001a78:	4d25      	ldr	r5, [pc, #148]	@ (8001b10 <HAL_I2C_Init+0x1b8>)
 8001a7a:	fba5 5303 	umull	r5, r3, r5, r3
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	3301      	adds	r3, #1
 8001a82:	e7a6      	b.n	80019d2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a84:	68a6      	ldr	r6, [r4, #8]
 8001a86:	b9be      	cbnz	r6, 8001ab8 <HAL_I2C_Init+0x160>
 8001a88:	1e43      	subs	r3, r0, #1
 8001a8a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001a8e:	fbb3 f3fc 	udiv	r3, r3, ip
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	bb43      	cbnz	r3, 8001af2 <HAL_I2C_Init+0x19a>
 8001aa0:	b9c6      	cbnz	r6, 8001ad4 <HAL_I2C_Init+0x17c>
 8001aa2:	1e43      	subs	r3, r0, #1
 8001aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001aa8:	fbb3 f3f5 	udiv	r3, r3, r5
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab6:	e7a3      	b.n	8001a00 <HAL_I2C_Init+0xa8>
 8001ab8:	1e43      	subs	r3, r0, #1
 8001aba:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8001abe:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001ac2:	fbb3 f3fc 	udiv	r3, r3, ip
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	e7e4      	b.n	8001a9e <HAL_I2C_Init+0x146>
 8001ad4:	1e43      	subs	r3, r0, #1
 8001ad6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001ada:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001ade:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aec:	e788      	b.n	8001a00 <HAL_I2C_Init+0xa8>
 8001aee:	2304      	movs	r3, #4
 8001af0:	e786      	b.n	8001a00 <HAL_I2C_Init+0xa8>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e784      	b.n	8001a00 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001af6:	2001      	movs	r0, #1
}
 8001af8:	4770      	bx	lr
    return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e7ac      	b.n	8001a58 <HAL_I2C_Init+0x100>
 8001afe:	bf00      	nop
 8001b00:	000186a0 	.word	0x000186a0
 8001b04:	001e847f 	.word	0x001e847f
 8001b08:	431bde83 	.word	0x431bde83
 8001b0c:	003d08ff 	.word	0x003d08ff
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_I2C_Master_Transmit>:
{
 8001b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	460f      	mov	r7, r1
 8001b1e:	4690      	mov	r8, r2
 8001b20:	4699      	mov	r9, r3
 8001b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff fb40 	bl	80011a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b28:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8001b2c:	2920      	cmp	r1, #32
 8001b2e:	d004      	beq.n	8001b3a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8001b30:	2702      	movs	r7, #2
}
 8001b32:	4638      	mov	r0, r7
 8001b34:	b005      	add	sp, #20
 8001b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	2319      	movs	r3, #25
 8001b40:	2201      	movs	r2, #1
 8001b42:	494f      	ldr	r1, [pc, #316]	@ (8001c80 <HAL_I2C_Master_Transmit+0x16c>)
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff fcc2 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	f040 8092 	bne.w	8001c74 <HAL_I2C_Master_Transmit+0x160>
    __HAL_LOCK(hi2c);
 8001b50:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f000 808f 	beq.w	8001c78 <HAL_I2C_Master_Transmit+0x164>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	f012 0f01 	tst.w	r2, #1
 8001b68:	d103      	bne.n	8001b72 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	6813      	ldr	r3, [r2, #0]
 8001b76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b7a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b7c:	2321      	movs	r3, #33	@ 0x21
 8001b7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b82:	2310      	movs	r3, #16
 8001b84:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001b8c:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b90:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b94:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001b96:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_I2C_Master_Transmit+0x170>)
 8001b9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b9c:	462b      	mov	r3, r5
 8001b9e:	4632      	mov	r2, r6
 8001ba0:	4639      	mov	r1, r7
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff fd54 	bl	8001650 <I2C_MasterRequestWrite>
 8001ba8:	4607      	mov	r7, r0
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d166      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x168>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9303      	str	r3, [sp, #12]
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	9203      	str	r2, [sp, #12]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	9303      	str	r3, [sp, #12]
 8001bbc:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001bbe:	e011      	b.n	8001be4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Master_Transmit+0xb6>
        return HAL_ERROR;
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	e7b3      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6813      	ldr	r3, [r2, #0]
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e7f7      	b.n	8001bc6 <HAL_I2C_Master_Transmit+0xb2>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	4631      	mov	r1, r6
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f7ff fe51 	bl	8001882 <I2C_WaitOnBTFFlagUntilTimeout>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d12e      	bne.n	8001c42 <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8001be4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_I2C_Master_Transmit+0x144>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bea:	462a      	mov	r2, r5
 8001bec:	4631      	mov	r1, r6
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fe18 	bl	8001824 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d1e3      	bne.n	8001bc0 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c00:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001c02:	1c43      	adds	r3, r0, #1
 8001c04:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001c06:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001c08:	b289      	uxth	r1, r1
 8001c0a:	3901      	subs	r1, #1
 8001c0c:	b289      	uxth	r1, r1
 8001c0e:	8561      	strh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c10:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6951      	ldr	r1, [r2, #20]
 8001c1c:	f011 0f04 	tst.w	r1, #4
 8001c20:	d0d9      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0xc2>
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0d7      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c26:	7843      	ldrb	r3, [r0, #1]
 8001c28:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8001c2a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001c30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c3a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8001c40:	e7c9      	b.n	8001bd6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 8001c48:	2701      	movs	r7, #1
 8001c4a:	e772      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	6822      	ldr	r2, [r4, #0]
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e7f7      	b.n	8001c48 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	6822      	ldr	r2, [r4, #0]
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c60:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	2320      	movs	r3, #32
 8001c64:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001c6e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001c72:	e75e      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8001c74:	2702      	movs	r7, #2
 8001c76:	e75c      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001c78:	2702      	movs	r7, #2
 8001c7a:	e75a      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8001c7c:	2701      	movs	r7, #1
 8001c7e:	e758      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1e>
 8001c80:	00100002 	.word	0x00100002
 8001c84:	ffff0000 	.word	0xffff0000

08001c88 <HAL_I2C_Master_Receive>:
{
 8001c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	4604      	mov	r4, r0
 8001c90:	460f      	mov	r7, r1
 8001c92:	4690      	mov	r8, r2
 8001c94:	4699      	mov	r9, r3
 8001c96:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fa86 	bl	80011a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9c:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8001ca0:	2920      	cmp	r1, #32
 8001ca2:	d004      	beq.n	8001cae <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8001ca4:	2702      	movs	r7, #2
}
 8001ca6:	4638      	mov	r0, r7
 8001ca8:	b007      	add	sp, #28
 8001caa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cae:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb0:	9000      	str	r0, [sp, #0]
 8001cb2:	2319      	movs	r3, #25
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	498a      	ldr	r1, [pc, #552]	@ (8001ee0 <HAL_I2C_Master_Receive+0x258>)
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fc08 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	f040 8150 	bne.w	8001f64 <HAL_I2C_Master_Receive+0x2dc>
    __HAL_LOCK(hi2c);
 8001cc4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	f000 814d 	beq.w	8001f68 <HAL_I2C_Master_Receive+0x2e0>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f012 0f01 	tst.w	r2, #1
 8001cdc:	d103      	bne.n	8001ce6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ce6:	6822      	ldr	r2, [r4, #0]
 8001ce8:	6813      	ldr	r3, [r2, #0]
 8001cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001cee:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001cf0:	2322      	movs	r3, #34	@ 0x22
 8001cf2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001d00:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d04:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001d0a:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0c:	4b75      	ldr	r3, [pc, #468]	@ (8001ee4 <HAL_I2C_Master_Receive+0x25c>)
 8001d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d10:	462b      	mov	r3, r5
 8001d12:	4632      	mov	r2, r6
 8001d14:	4639      	mov	r1, r7
 8001d16:	4620      	mov	r0, r4
 8001d18:	f7ff fcf4 	bl	8001704 <I2C_MasterRequestRead>
 8001d1c:	4607      	mov	r7, r0
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	f040 8124 	bne.w	8001f6c <HAL_I2C_Master_Receive+0x2e4>
    if (hi2c->XferSize == 0U)
 8001d24:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001d26:	b95b      	cbnz	r3, 8001d40 <HAL_I2C_Master_Receive+0xb8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	9202      	str	r2, [sp, #8]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	9202      	str	r2, [sp, #8]
 8001d34:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e07a      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
    else if (hi2c->XferSize == 1U)
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00f      	beq.n	8001d64 <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 2U)
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d01f      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x100>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d50:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d52:	2300      	movs	r3, #0
 8001d54:	9305      	str	r3, [sp, #20]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	9205      	str	r2, [sp, #20]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	9305      	str	r3, [sp, #20]
 8001d60:	9b05      	ldr	r3, [sp, #20]
 8001d62:	e068      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6813      	ldr	r3, [r2, #0]
 8001d68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d6c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9303      	str	r3, [sp, #12]
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	9203      	str	r2, [sp, #12]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	9203      	str	r2, [sp, #12]
 8001d7c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e056      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d88:	6822      	ldr	r2, [r4, #0]
 8001d8a:	6813      	ldr	r3, [r2, #0]
 8001d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d90:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	6813      	ldr	r3, [r2, #0]
 8001d96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d9a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9304      	str	r3, [sp, #16]
 8001da0:	6823      	ldr	r3, [r4, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	9204      	str	r2, [sp, #16]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	9304      	str	r3, [sp, #16]
 8001daa:	9b04      	ldr	r3, [sp, #16]
 8001dac:	e043      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dae:	462a      	mov	r2, r5
 8001db0:	4631      	mov	r1, r6
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7ff fd94 	bl	80018e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	f040 80d9 	bne.w	8001f70 <HAL_I2C_Master_Receive+0x2e8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dc4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001dc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dc8:	3301      	adds	r3, #1
 8001dca:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001dcc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001ddc:	e02b      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dde:	9500      	str	r5, [sp, #0]
 8001de0:	4633      	mov	r3, r6
 8001de2:	2200      	movs	r2, #0
 8001de4:	4940      	ldr	r1, [pc, #256]	@ (8001ee8 <HAL_I2C_Master_Receive+0x260>)
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff fb71 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	f040 80c1 	bne.w	8001f74 <HAL_I2C_Master_Receive+0x2ec>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	6813      	ldr	r3, [r2, #0]
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e02:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e06:	1c53      	adds	r3, r2, #1
 8001e08:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001e0a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001e10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001e20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e22:	3301      	adds	r3, #1
 8001e24:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001e26:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001e2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001e36:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8001e38:	2900      	cmp	r1, #0
 8001e3a:	f000 808a 	beq.w	8001f52 <HAL_I2C_Master_Receive+0x2ca>
      if (hi2c->XferSize <= 3U)
 8001e3e:	2903      	cmp	r1, #3
 8001e40:	d854      	bhi.n	8001eec <HAL_I2C_Master_Receive+0x264>
        if (hi2c->XferSize == 1U)
 8001e42:	2901      	cmp	r1, #1
 8001e44:	d0b3      	beq.n	8001dae <HAL_I2C_Master_Receive+0x126>
        else if (hi2c->XferSize == 2U)
 8001e46:	2902      	cmp	r1, #2
 8001e48:	d0c9      	beq.n	8001dde <HAL_I2C_Master_Receive+0x156>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e4a:	9500      	str	r5, [sp, #0]
 8001e4c:	4633      	mov	r3, r6
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4925      	ldr	r1, [pc, #148]	@ (8001ee8 <HAL_I2C_Master_Receive+0x260>)
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff fb3b 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	f040 808d 	bne.w	8001f78 <HAL_I2C_Master_Receive+0x2f0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e5e:	6822      	ldr	r2, [r4, #0]
 8001e60:	6813      	ldr	r3, [r2, #0]
 8001e62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e66:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e6e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001e70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001e72:	3301      	adds	r3, #1
 8001e74:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001e76:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001e7c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8001e7e:	b289      	uxth	r1, r1
 8001e80:	3901      	subs	r1, #1
 8001e82:	b289      	uxth	r1, r1
 8001e84:	8561      	strh	r1, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e86:	9500      	str	r5, [sp, #0]
 8001e88:	4633      	mov	r3, r6
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4916      	ldr	r1, [pc, #88]	@ (8001ee8 <HAL_I2C_Master_Receive+0x260>)
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fb1d 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d171      	bne.n	8001f7c <HAL_I2C_Master_Receive+0x2f4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	6822      	ldr	r2, [r4, #0]
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ea0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ea8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001eaa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001eac:	1c53      	adds	r3, r2, #1
 8001eae:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001eb0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001eb6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001ec6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001ecc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001ed2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001edc:	e7ab      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
 8001ede:	bf00      	nop
 8001ee0:	00100002 	.word	0x00100002
 8001ee4:	ffff0000 	.word	0xffff0000
 8001ee8:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eec:	462a      	mov	r2, r5
 8001eee:	4631      	mov	r1, r6
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff fcf5 	bl	80018e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d142      	bne.n	8001f80 <HAL_I2C_Master_Receive+0x2f8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f04:	3301      	adds	r3, #1
 8001f06:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8001f08:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8001f0a:	3a01      	subs	r2, #1
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001f10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	6959      	ldr	r1, [r3, #20]
 8001f1e:	f011 0f04 	tst.w	r1, #4
 8001f22:	d088      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
          if (hi2c->XferSize == 3U)
 8001f24:	2a03      	cmp	r2, #3
 8001f26:	d00f      	beq.n	8001f48 <HAL_I2C_Master_Receive+0x2c0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f2e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001f30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f32:	3301      	adds	r3, #1
 8001f34:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8001f36:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8001f3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8001f46:	e776      	b.n	8001e36 <HAL_I2C_Master_Receive+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e7ea      	b.n	8001f28 <HAL_I2C_Master_Receive+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f52:	2320      	movs	r3, #32
 8001f54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8001f5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8001f62:	e6a0      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8001f64:	2702      	movs	r7, #2
 8001f66:	e69e      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001f68:	2702      	movs	r7, #2
 8001f6a:	e69c      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8001f6c:	2701      	movs	r7, #1
 8001f6e:	e69a      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8001f70:	2701      	movs	r7, #1
 8001f72:	e698      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8001f74:	2701      	movs	r7, #1
 8001f76:	e696      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8001f78:	2701      	movs	r7, #1
 8001f7a:	e694      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8001f7c:	2701      	movs	r7, #1
 8001f7e:	e692      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8001f80:	2701      	movs	r7, #1
 8001f82:	e690      	b.n	8001ca6 <HAL_I2C_Master_Receive+0x1e>

08001f84 <HAL_I2C_IsDeviceReady>:
{
 8001f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4688      	mov	r8, r1
 8001f8e:	4691      	mov	r9, r2
 8001f90:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001f92:	f7ff f909 	bl	80011a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f96:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d003      	beq.n	8001fa6 <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 8001f9e:	2002      	movs	r0, #2
}
 8001fa0:	b005      	add	sp, #20
 8001fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fa6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa8:	9000      	str	r0, [sp, #0]
 8001faa:	2319      	movs	r3, #25
 8001fac:	2201      	movs	r2, #1
 8001fae:	4956      	ldr	r1, [pc, #344]	@ (8002108 <HAL_I2C_IsDeviceReady+0x184>)
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fa8c 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	f040 809d 	bne.w	80020f6 <HAL_I2C_IsDeviceReady+0x172>
    __HAL_LOCK(hi2c);
 8001fbc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f000 809a 	beq.w	80020fa <HAL_I2C_IsDeviceReady+0x176>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	f012 0f01 	tst.w	r2, #1
 8001fd4:	d103      	bne.n	8001fde <HAL_I2C_IsDeviceReady+0x5a>
      __HAL_I2C_ENABLE(hi2c);
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fde:	6822      	ldr	r2, [r4, #0]
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fe6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe8:	2324      	movs	r3, #36	@ 0x24
 8001fea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fee:	2700      	movs	r7, #0
 8001ff0:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ff2:	4b46      	ldr	r3, [pc, #280]	@ (800210c <HAL_I2C_IsDeviceReady+0x188>)
 8001ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ff6:	e03d      	b.n	8002074 <HAL_I2C_IsDeviceReady+0xf0>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002000:	d002      	beq.n	8002008 <HAL_I2C_IsDeviceReady+0x84>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002006:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002008:	2003      	movs	r0, #3
 800200a:	e7c9      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800200c:	23a0      	movs	r3, #160	@ 0xa0
 800200e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	6953      	ldr	r3, [r2, #20]
 8002016:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800201a:	6952      	ldr	r2, [r2, #20]
 800201c:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002020:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8002024:	29a0      	cmp	r1, #160	@ 0xa0
 8002026:	d009      	beq.n	800203c <HAL_I2C_IsDeviceReady+0xb8>
 8002028:	b943      	cbnz	r3, 800203c <HAL_I2C_IsDeviceReady+0xb8>
 800202a:	b93a      	cbnz	r2, 800203c <HAL_I2C_IsDeviceReady+0xb8>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800202c:	f7ff f8bc 	bl	80011a8 <HAL_GetTick>
 8002030:	1b80      	subs	r0, r0, r6
 8002032:	42a8      	cmp	r0, r5
 8002034:	d8ea      	bhi.n	800200c <HAL_I2C_IsDeviceReady+0x88>
 8002036:	2d00      	cmp	r5, #0
 8002038:	d1eb      	bne.n	8002012 <HAL_I2C_IsDeviceReady+0x8e>
 800203a:	e7e7      	b.n	800200c <HAL_I2C_IsDeviceReady+0x88>
      hi2c->State = HAL_I2C_STATE_READY;
 800203c:	2320      	movs	r3, #32
 800203e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	f012 0f02 	tst.w	r2, #2
 800204a:	d131      	bne.n	80020b0 <HAL_I2C_IsDeviceReady+0x12c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002052:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800205a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800205c:	9600      	str	r6, [sp, #0]
 800205e:	2319      	movs	r3, #25
 8002060:	2201      	movs	r2, #1
 8002062:	4929      	ldr	r1, [pc, #164]	@ (8002108 <HAL_I2C_IsDeviceReady+0x184>)
 8002064:	4620      	mov	r0, r4
 8002066:	f7ff fa32 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 800206a:	2800      	cmp	r0, #0
 800206c:	d149      	bne.n	8002102 <HAL_I2C_IsDeviceReady+0x17e>
      I2C_Trials++;
 800206e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002070:	454f      	cmp	r7, r9
 8002072:	d238      	bcs.n	80020e6 <HAL_I2C_IsDeviceReady+0x162>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800207e:	9600      	str	r6, [sp, #0]
 8002080:	462b      	mov	r3, r5
 8002082:	2200      	movs	r2, #0
 8002084:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff fa20 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 800208e:	2800      	cmp	r0, #0
 8002090:	d1b2      	bne.n	8001ff8 <HAL_I2C_IsDeviceReady+0x74>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8002098:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800209a:	f7ff f885 	bl	80011a8 <HAL_GetTick>
 800209e:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020a0:	6822      	ldr	r2, [r4, #0]
 80020a2:	6953      	ldr	r3, [r2, #20]
 80020a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020a8:	6952      	ldr	r2, [r2, #20]
 80020aa:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020ae:	e7b7      	b.n	8002020 <HAL_I2C_IsDeviceReady+0x9c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020b6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b8:	2300      	movs	r3, #0
 80020ba:	9303      	str	r3, [sp, #12]
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	9203      	str	r2, [sp, #12]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c8:	9600      	str	r6, [sp, #0]
 80020ca:	2319      	movs	r3, #25
 80020cc:	2201      	movs	r2, #1
 80020ce:	490e      	ldr	r1, [pc, #56]	@ (8002108 <HAL_I2C_IsDeviceReady+0x184>)
 80020d0:	4620      	mov	r0, r4
 80020d2:	f7ff f9fc 	bl	80014ce <I2C_WaitOnFlagUntilTimeout>
 80020d6:	b990      	cbnz	r0, 80020fe <HAL_I2C_IsDeviceReady+0x17a>
        hi2c->State = HAL_I2C_STATE_READY;
 80020d8:	2320      	movs	r3, #32
 80020da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80020de:	2300      	movs	r3, #0
 80020e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80020e4:	e75c      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	2320      	movs	r3, #32
 80020e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80020ec:	2300      	movs	r3, #0
 80020ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
 80020f4:	e754      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
      return HAL_BUSY;
 80020f6:	2002      	movs	r0, #2
 80020f8:	e752      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80020fa:	2002      	movs	r0, #2
 80020fc:	e750      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
          return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
 8002100:	e74e      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
          return HAL_ERROR;
 8002102:	2001      	movs	r0, #1
 8002104:	e74c      	b.n	8001fa0 <HAL_I2C_IsDeviceReady+0x1c>
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000

08002110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2100      	movs	r1, #0
 8002114:	9100      	str	r1, [sp, #0]
 8002116:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_MspInit+0x34>)
 8002118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800211a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002120:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002122:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002126:	9200      	str	r2, [sp, #0]
 8002128:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	9101      	str	r1, [sp, #4]
 800212c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800212e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213e:	b002      	add	sp, #8
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	2800      	cmp	r0, #0
 800214a:	f000 81e0 	beq.w	800250e <HAL_RCC_OscConfig+0x3c6>
{
 800214e:	b570      	push	{r4, r5, r6, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002154:	6803      	ldr	r3, [r0, #0]
 8002156:	f013 0f01 	tst.w	r3, #1
 800215a:	d03b      	beq.n	80021d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800215c:	4b9f      	ldr	r3, [pc, #636]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	d02c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002168:	4b9c      	ldr	r3, [pc, #624]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002170:	2b08      	cmp	r3, #8
 8002172:	d021      	beq.n	80021b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002174:	6863      	ldr	r3, [r4, #4]
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217a:	d04f      	beq.n	800221c <HAL_RCC_OscConfig+0xd4>
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002180:	d052      	beq.n	8002228 <HAL_RCC_OscConfig+0xe0>
 8002182:	4b96      	ldr	r3, [pc, #600]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002192:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002194:	6863      	ldr	r3, [r4, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d050      	beq.n	800223c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff f805 	bl	80011a8 <HAL_GetTick>
 800219e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	4b8e      	ldr	r3, [pc, #568]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021a8:	d114      	bne.n	80021d4 <HAL_RCC_OscConfig+0x8c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021aa:	f7fe fffd 	bl	80011a8 <HAL_GetTick>
 80021ae:	1b40      	subs	r0, r0, r5
 80021b0:	2864      	cmp	r0, #100	@ 0x64
 80021b2:	d9f5      	bls.n	80021a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e1b1      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80021c0:	d0d8      	beq.n	8002174 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b86      	ldr	r3, [pc, #536]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021ca:	d003      	beq.n	80021d4 <HAL_RCC_OscConfig+0x8c>
 80021cc:	6863      	ldr	r3, [r4, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 819f 	beq.w	8002512 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	f013 0f02 	tst.w	r3, #2
 80021da:	d054      	beq.n	8002286 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021dc:	4b7f      	ldr	r3, [pc, #508]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f013 0f0c 	tst.w	r3, #12
 80021e4:	d03e      	beq.n	8002264 <HAL_RCC_OscConfig+0x11c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b7d      	ldr	r3, [pc, #500]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d033      	beq.n	800225a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021f2:	68e3      	ldr	r3, [r4, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d068      	beq.n	80022ca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b79      	ldr	r3, [pc, #484]	@ (80023e0 <HAL_RCC_OscConfig+0x298>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7fe ffd3 	bl	80011a8 <HAL_GetTick>
 8002202:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f013 0f02 	tst.w	r3, #2
 800220c:	d154      	bne.n	80022b8 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7fe ffcb 	bl	80011a8 <HAL_GetTick>
 8002212:	1b40      	subs	r0, r0, r5
 8002214:	2802      	cmp	r0, #2
 8002216:	d9f5      	bls.n	8002204 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002218:	2003      	movs	r0, #3
 800221a:	e17f      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	4a6f      	ldr	r2, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800221e:	6813      	ldr	r3, [r2, #0]
 8002220:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e7b5      	b.n	8002194 <HAL_RCC_OscConfig+0x4c>
 8002228:	4b6c      	ldr	r3, [pc, #432]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e7ab      	b.n	8002194 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800223c:	f7fe ffb4 	bl	80011a8 <HAL_GetTick>
 8002240:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800224a:	d0c3      	beq.n	80021d4 <HAL_RCC_OscConfig+0x8c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ffac 	bl	80011a8 <HAL_GetTick>
 8002250:	1b40      	subs	r0, r0, r5
 8002252:	2864      	cmp	r0, #100	@ 0x64
 8002254:	d9f5      	bls.n	8002242 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
 8002258:	e160      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b60      	ldr	r3, [pc, #384]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002262:	d1c6      	bne.n	80021f2 <HAL_RCC_OscConfig+0xaa>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002264:	4b5d      	ldr	r3, [pc, #372]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f013 0f02 	tst.w	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_OscConfig+0x12e>
 800226e:	68e3      	ldr	r3, [r4, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 8150 	bne.w	8002516 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4a59      	ldr	r2, [pc, #356]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800227e:	6921      	ldr	r1, [r4, #16]
 8002280:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002284:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	f013 0f08 	tst.w	r3, #8
 800228c:	d042      	beq.n	8002314 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800228e:	6963      	ldr	r3, [r4, #20]
 8002290:	b36b      	cbz	r3, 80022ee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b53      	ldr	r3, [pc, #332]	@ (80023e0 <HAL_RCC_OscConfig+0x298>)
 8002294:	2201      	movs	r2, #1
 8002296:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe ff85 	bl	80011a8 <HAL_GetTick>
 800229e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a0:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80022a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a4:	f013 0f02 	tst.w	r3, #2
 80022a8:	d134      	bne.n	8002314 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022aa:	f7fe ff7d 	bl	80011a8 <HAL_GetTick>
 80022ae:	1b40      	subs	r0, r0, r5
 80022b0:	2802      	cmp	r0, #2
 80022b2:	d9f5      	bls.n	80022a0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80022b4:	2003      	movs	r0, #3
 80022b6:	e131      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b8:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022c0:	6921      	ldr	r1, [r4, #16]
 80022c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	e7dd      	b.n	8002286 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <HAL_RCC_OscConfig+0x298>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022d0:	f7fe ff6a 	bl	80011a8 <HAL_GetTick>
 80022d4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f013 0f02 	tst.w	r3, #2
 80022de:	d0d2      	beq.n	8002286 <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe ff62 	bl	80011a8 <HAL_GetTick>
 80022e4:	1b40      	subs	r0, r0, r5
 80022e6:	2802      	cmp	r0, #2
 80022e8:	d9f5      	bls.n	80022d6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80022ea:	2003      	movs	r0, #3
 80022ec:	e116      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <HAL_RCC_OscConfig+0x298>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff57 	bl	80011a8 <HAL_GetTick>
 80022fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80022fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002300:	f013 0f02 	tst.w	r3, #2
 8002304:	d006      	beq.n	8002314 <HAL_RCC_OscConfig+0x1cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe ff4f 	bl	80011a8 <HAL_GetTick>
 800230a:	1b40      	subs	r0, r0, r5
 800230c:	2802      	cmp	r0, #2
 800230e:	d9f5      	bls.n	80022fc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002310:	2003      	movs	r0, #3
 8002312:	e103      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	f013 0f04 	tst.w	r3, #4
 800231a:	d077      	beq.n	800240c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b2f      	ldr	r3, [pc, #188]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002324:	d133      	bne.n	800238e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	4b2c      	ldr	r3, [pc, #176]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 800232c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800232e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002332:	641a      	str	r2, [r3, #64]	@ 0x40
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800233e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b28      	ldr	r3, [pc, #160]	@ (80023e4 <HAL_RCC_OscConfig+0x29c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002348:	d023      	beq.n	8002392 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234a:	68a3      	ldr	r3, [r4, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d034      	beq.n	80023ba <HAL_RCC_OscConfig+0x272>
 8002350:	2b05      	cmp	r3, #5
 8002352:	d038      	beq.n	80023c6 <HAL_RCC_OscConfig+0x27e>
 8002354:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002356:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	671a      	str	r2, [r3, #112]	@ 0x70
 800235e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002360:	f022 0204 	bic.w	r2, r2, #4
 8002364:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002366:	68a3      	ldr	r3, [r4, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03d      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe ff1c 	bl	80011a8 <HAL_GetTick>
 8002370:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	f013 0f02 	tst.w	r3, #2
 800237a:	d146      	bne.n	800240a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe ff14 	bl	80011a8 <HAL_GetTick>
 8002380:	1b80      	subs	r0, r0, r6
 8002382:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002386:	4298      	cmp	r0, r3
 8002388:	d9f3      	bls.n	8002372 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800238a:	2003      	movs	r0, #3
 800238c:	e0c6      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800238e:	2500      	movs	r5, #0
 8002390:	e7d6      	b.n	8002340 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002392:	4a14      	ldr	r2, [pc, #80]	@ (80023e4 <HAL_RCC_OscConfig+0x29c>)
 8002394:	6813      	ldr	r3, [r2, #0]
 8002396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800239c:	f7fe ff04 	bl	80011a8 <HAL_GetTick>
 80023a0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_RCC_OscConfig+0x29c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80023aa:	d1ce      	bne.n	800234a <HAL_RCC_OscConfig+0x202>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fefc 	bl	80011a8 <HAL_GetTick>
 80023b0:	1b80      	subs	r0, r0, r6
 80023b2:	2802      	cmp	r0, #2
 80023b4:	d9f5      	bls.n	80023a2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
 80023b8:	e0b0      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80023bc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	e7cf      	b.n	8002366 <HAL_RCC_OscConfig+0x21e>
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_RCC_OscConfig+0x294>)
 80023c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023ca:	f042 0204 	orr.w	r2, r2, #4
 80023ce:	671a      	str	r2, [r3, #112]	@ 0x70
 80023d0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	671a      	str	r2, [r3, #112]	@ 0x70
 80023d8:	e7c5      	b.n	8002366 <HAL_RCC_OscConfig+0x21e>
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	42470000 	.word	0x42470000
 80023e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fede 	bl	80011a8 <HAL_GetTick>
 80023ec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	f013 0f02 	tst.w	r3, #2
 80023f6:	d008      	beq.n	800240a <HAL_RCC_OscConfig+0x2c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7fe fed6 	bl	80011a8 <HAL_GetTick>
 80023fc:	1b80      	subs	r0, r0, r6
 80023fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002402:	4298      	cmp	r0, r3
 8002404:	d9f3      	bls.n	80023ee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002406:	2003      	movs	r0, #3
 8002408:	e088      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800240a:	b9ed      	cbnz	r5, 8002448 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	69a3      	ldr	r3, [r4, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8083 	beq.w	800251a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002414:	4a48      	ldr	r2, [pc, #288]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 8002416:	6892      	ldr	r2, [r2, #8]
 8002418:	f002 020c 	and.w	r2, r2, #12
 800241c:	2a08      	cmp	r2, #8
 800241e:	d051      	beq.n	80024c4 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002420:	2b02      	cmp	r3, #2
 8002422:	d017      	beq.n	8002454 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b45      	ldr	r3, [pc, #276]	@ (800253c <HAL_RCC_OscConfig+0x3f4>)
 8002426:	2200      	movs	r2, #0
 8002428:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7fe febd 	bl	80011a8 <HAL_GetTick>
 800242e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002430:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002438:	d042      	beq.n	80024c0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe feb5 	bl	80011a8 <HAL_GetTick>
 800243e:	1b00      	subs	r0, r0, r4
 8002440:	2802      	cmp	r0, #2
 8002442:	d9f5      	bls.n	8002430 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002444:	2003      	movs	r0, #3
 8002446:	e069      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002448:	4a3b      	ldr	r2, [pc, #236]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 800244a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	e7db      	b.n	800240c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_OscConfig+0x3f4>)
 8002456:	2200      	movs	r2, #0
 8002458:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800245a:	f7fe fea5 	bl	80011a8 <HAL_GetTick>
 800245e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002460:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002468:	d006      	beq.n	8002478 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7fe fe9d 	bl	80011a8 <HAL_GetTick>
 800246e:	1b40      	subs	r0, r0, r5
 8002470:	2802      	cmp	r0, #2
 8002472:	d9f5      	bls.n	8002460 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002474:	2003      	movs	r0, #3
 8002476:	e051      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002478:	69e3      	ldr	r3, [r4, #28]
 800247a:	6a22      	ldr	r2, [r4, #32]
 800247c:	4313      	orrs	r3, r2
 800247e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002480:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002484:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002486:	0852      	lsrs	r2, r2, #1
 8002488:	3a01      	subs	r2, #1
 800248a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800248e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 8002496:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <HAL_RCC_OscConfig+0x3f4>)
 800249a:	2201      	movs	r2, #1
 800249c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800249e:	f7fe fe83 	bl	80011a8 <HAL_GetTick>
 80024a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a4:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80024ac:	d106      	bne.n	80024bc <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe fe7b 	bl	80011a8 <HAL_GetTick>
 80024b2:	1b00      	subs	r0, r0, r4
 80024b4:	2802      	cmp	r0, #2
 80024b6:	d9f5      	bls.n	80024a4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80024b8:	2003      	movs	r0, #3
 80024ba:	e02f      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80024bc:	2000      	movs	r0, #0
 80024be:	e02d      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 80024c0:	2000      	movs	r0, #0
 80024c2:	e02b      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d02b      	beq.n	8002520 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002538 <HAL_RCC_OscConfig+0x3f0>)
 80024ca:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 80024d0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024d2:	4291      	cmp	r1, r2
 80024d4:	d126      	bne.n	8002524 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024da:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	428a      	cmp	r2, r1
 80024de:	d123      	bne.n	8002528 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80024e6:	401a      	ands	r2, r3
 80024e8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024ec:	d11e      	bne.n	800252c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80024f2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80024f4:	0852      	lsrs	r2, r2, #1
 80024f6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024fe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002502:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002504:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002508:	d114      	bne.n	8002534 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
 800250c:	e006      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
}
 8002510:	4770      	bx	lr
        return HAL_ERROR;
 8002512:	2001      	movs	r0, #1
 8002514:	e002      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002516:	2001      	movs	r0, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800251a:	2000      	movs	r0, #0
}
 800251c:	b002      	add	sp, #8
 800251e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
 8002522:	e7fb      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7f9      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 8002528:	2001      	movs	r0, #1
 800252a:	e7f7      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 800252c:	2001      	movs	r0, #1
 800252e:	e7f5      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 8002530:	2001      	movs	r0, #1
 8002532:	e7f3      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 8002534:	2001      	movs	r0, #1
 8002536:	e7f1      	b.n	800251c <HAL_RCC_OscConfig+0x3d4>
 8002538:	40023800 	.word	0x40023800
 800253c:	42470000 	.word	0x42470000

08002540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002540:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002542:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d041      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x92>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d141      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002552:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002560:	d012      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800256a:	481d      	ldr	r0, [pc, #116]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256c:	2300      	movs	r3, #0
 800256e:	fba1 0100 	umull	r0, r1, r1, r0
 8002572:	f7fe fa9b 	bl	8000aac <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002576:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002582:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002586:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x9c>)
 800258a:	6858      	ldr	r0, [r3, #4]
 800258c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002590:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002594:	ebbc 0c00 	subs.w	ip, ip, r0
 8002598:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800259c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80025a0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80025a4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80025a8:	ebb1 010c 	subs.w	r1, r1, ip
 80025ac:	eb63 030e 	sbc.w	r3, r3, lr
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b6:	00c9      	lsls	r1, r1, #3
 80025b8:	eb11 0c00 	adds.w	ip, r1, r0
 80025bc:	f143 0300 	adc.w	r3, r3, #0
 80025c0:	0299      	lsls	r1, r3, #10
 80025c2:	2300      	movs	r3, #0
 80025c4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80025c8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80025cc:	f7fe fa6e 	bl	8000aac <__aeabi_uldivmod>
 80025d0:	e7d1      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80025d2:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d4:	e7d7      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x46>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xa4>)
  return sysclockfreq;
 80025d8:	e7d5      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x46>
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	017d7840 	.word	0x017d7840
 80025e4:	00f42400 	.word	0x00f42400

080025e8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80025e8:	2800      	cmp	r0, #0
 80025ea:	f000 809b 	beq.w	8002724 <HAL_RCC_ClockConfig+0x13c>
{
 80025ee:	b570      	push	{r4, r5, r6, lr}
 80025f0:	460d      	mov	r5, r1
 80025f2:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002734 <HAL_RCC_ClockConfig+0x14c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	428b      	cmp	r3, r1
 80025fe:	d208      	bcs.n	8002612 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002600:	b2cb      	uxtb	r3, r1
 8002602:	4a4c      	ldr	r2, [pc, #304]	@ (8002734 <HAL_RCC_ClockConfig+0x14c>)
 8002604:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	6813      	ldr	r3, [r2, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	428b      	cmp	r3, r1
 800260e:	f040 808b 	bne.w	8002728 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	f013 0f02 	tst.w	r3, #2
 8002618:	d017      	beq.n	800264a <HAL_RCC_ClockConfig+0x62>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261a:	f013 0f04 	tst.w	r3, #4
 800261e:	d004      	beq.n	800262a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4a45      	ldr	r2, [pc, #276]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 8002622:	6893      	ldr	r3, [r2, #8]
 8002624:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002628:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f013 0f08 	tst.w	r3, #8
 8002630:	d004      	beq.n	800263c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002632:	4a41      	ldr	r2, [pc, #260]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 8002634:	6893      	ldr	r3, [r2, #8]
 8002636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800263a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263c:	4a3e      	ldr	r2, [pc, #248]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 800263e:	6893      	ldr	r3, [r2, #8]
 8002640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002644:	68a1      	ldr	r1, [r4, #8]
 8002646:	430b      	orrs	r3, r1
 8002648:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	f013 0f01 	tst.w	r3, #1
 8002650:	d032      	beq.n	80026b8 <HAL_RCC_ClockConfig+0xd0>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	6863      	ldr	r3, [r4, #4]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d021      	beq.n	800269c <HAL_RCC_ClockConfig+0xb4>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002658:	1e9a      	subs	r2, r3, #2
 800265a:	2a01      	cmp	r2, #1
 800265c:	d925      	bls.n	80026aa <HAL_RCC_ClockConfig+0xc2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4a36      	ldr	r2, [pc, #216]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	f012 0f02 	tst.w	r2, #2
 8002666:	d061      	beq.n	800272c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002668:	4933      	ldr	r1, [pc, #204]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 800266a:	688a      	ldr	r2, [r1, #8]
 800266c:	f022 0203 	bic.w	r2, r2, #3
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002674:	f7fe fd98 	bl	80011a8 <HAL_GetTick>
 8002678:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	6862      	ldr	r2, [r4, #4]
 8002684:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268a:	f7fe fd8d 	bl	80011a8 <HAL_GetTick>
 800268e:	1b80      	subs	r0, r0, r6
 8002690:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002694:	4298      	cmp	r0, r3
 8002696:	d9f0      	bls.n	800267a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
 800269a:	e042      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269c:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80026a4:	d1e0      	bne.n	8002668 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80026a6:	2001      	movs	r0, #1
 80026a8:	e03b      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80026b2:	d1d9      	bne.n	8002668 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
 80026b6:	e034      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <HAL_RCC_ClockConfig+0x14c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	42ab      	cmp	r3, r5
 80026c2:	d907      	bls.n	80026d4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c4:	b2ea      	uxtb	r2, r5
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_ClockConfig+0x14c>)
 80026c8:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	42ab      	cmp	r3, r5
 80026d2:	d12d      	bne.n	8002730 <HAL_RCC_ClockConfig+0x148>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	f013 0f04 	tst.w	r3, #4
 80026da:	d006      	beq.n	80026ea <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4a16      	ldr	r2, [pc, #88]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 80026de:	6893      	ldr	r3, [r2, #8]
 80026e0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80026e4:	68e1      	ldr	r1, [r4, #12]
 80026e6:	430b      	orrs	r3, r1
 80026e8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	f013 0f08 	tst.w	r3, #8
 80026f0:	d007      	beq.n	8002702 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4a11      	ldr	r2, [pc, #68]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 80026f4:	6893      	ldr	r3, [r2, #8]
 80026f6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80026fa:	6921      	ldr	r1, [r4, #16]
 80026fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002700:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002702:	f7ff ff1d 	bl	8002540 <HAL_RCC_GetSysClockFreq>
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_RCC_ClockConfig+0x150>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800270e:	4a0b      	ldr	r2, [pc, #44]	@ (800273c <HAL_RCC_ClockConfig+0x154>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	40d8      	lsrs	r0, r3
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_RCC_ClockConfig+0x158>)
 8002716:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_RCC_ClockConfig+0x15c>)
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	f7fe fcf8 	bl	8001110 <HAL_InitTick>
  return HAL_OK;
 8002720:	2000      	movs	r0, #0
}
 8002722:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002724:	2001      	movs	r0, #1
}
 8002726:	4770      	bx	lr
      return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
 800272a:	e7fa      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 800272c:	2001      	movs	r0, #1
 800272e:	e7f8      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
 8002732:	e7f6      	b.n	8002722 <HAL_RCC_ClockConfig+0x13a>
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	080040a8 	.word	0x080040a8
 8002740:	20000008 	.word	0x20000008
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002748:	4b01      	ldr	r3, [pc, #4]	@ (8002750 <HAL_RCC_GetHCLKFreq+0x8>)
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000008 	.word	0x20000008

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002756:	f7ff fff7 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_RCC_GetPCLK1Freq+0x18>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002762:	4a03      	ldr	r2, [pc, #12]	@ (8002770 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
}
 8002766:	40d8      	lsrs	r0, r3
 8002768:	bd08      	pop	{r3, pc}
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800
 8002770:	080040a0 	.word	0x080040a0

08002774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002774:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002776:	f7ff ffe7 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800277a:	4b04      	ldr	r3, [pc, #16]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x18>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002782:	4a03      	ldr	r2, [pc, #12]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002784:	5cd3      	ldrb	r3, [r2, r3]
}
 8002786:	40d8      	lsrs	r0, r3
 8002788:	bd08      	pop	{r3, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	080040a0 	.word	0x080040a0

08002794 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002794:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002796:	f102 030c 	add.w	r3, r2, #12
 800279a:	e853 3f00 	ldrex	r3, [r3]
 800279e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	320c      	adds	r2, #12
 80027a4:	e842 3100 	strex	r1, r3, [r2]
 80027a8:	2900      	cmp	r1, #0
 80027aa:	d1f3      	bne.n	8002794 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	f102 0314 	add.w	r3, r2, #20
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	3214      	adds	r2, #20
 80027bc:	e842 3100 	strex	r1, r3, [r2]
 80027c0:	2900      	cmp	r1, #0
 80027c2:	d1f3      	bne.n	80027ac <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ca:	2320      	movs	r3, #32
 80027cc:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d0:	2300      	movs	r3, #0
 80027d2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80027d4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d8:	f102 030c 	add.w	r3, r2, #12
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e4:	320c      	adds	r2, #12
 80027e6:	e842 3100 	strex	r1, r3, [r2]
 80027ea:	2900      	cmp	r1, #0
 80027ec:	d1f3      	bne.n	80027d6 <UART_EndRxTransfer+0x42>
 80027ee:	e7ec      	b.n	80027ca <UART_EndRxTransfer+0x36>

080027f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	6802      	ldr	r2, [r0, #0]
 80027f6:	6913      	ldr	r3, [r2, #16]
 80027f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027fc:	68c1      	ldr	r1, [r0, #12]
 80027fe:	430b      	orrs	r3, r1
 8002800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002802:	6883      	ldr	r3, [r0, #8]
 8002804:	6902      	ldr	r2, [r0, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	6943      	ldr	r3, [r0, #20]
 800280a:	431a      	orrs	r2, r3
 800280c:	69c3      	ldr	r3, [r0, #28]
 800280e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002810:	6801      	ldr	r1, [r0, #0]
 8002812:	68cb      	ldr	r3, [r1, #12]
 8002814:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002818:	f023 030c 	bic.w	r3, r3, #12
 800281c:	4313      	orrs	r3, r2
 800281e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002820:	6802      	ldr	r2, [r0, #0]
 8002822:	6953      	ldr	r3, [r2, #20]
 8002824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002828:	6981      	ldr	r1, [r0, #24]
 800282a:	430b      	orrs	r3, r1
 800282c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800282e:	6803      	ldr	r3, [r0, #0]
 8002830:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <UART_SetConfig+0x108>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d006      	beq.n	8002844 <UART_SetConfig+0x54>
 8002836:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800283a:	4293      	cmp	r3, r2
 800283c:	d002      	beq.n	8002844 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800283e:	f7ff ff89 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 8002842:	e001      	b.n	8002848 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002844:	f7ff ff96 	bl	8002774 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002848:	69e3      	ldr	r3, [r4, #28]
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284e:	d029      	beq.n	80028a4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002850:	2100      	movs	r1, #0
 8002852:	1803      	adds	r3, r0, r0
 8002854:	4149      	adcs	r1, r1
 8002856:	181b      	adds	r3, r3, r0
 8002858:	f141 0100 	adc.w	r1, r1, #0
 800285c:	00c9      	lsls	r1, r1, #3
 800285e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1818      	adds	r0, r3, r0
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800286c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002870:	f141 0100 	adc.w	r1, r1, #0
 8002874:	f7fe f91a 	bl	8000aac <__aeabi_uldivmod>
 8002878:	4a20      	ldr	r2, [pc, #128]	@ (80028fc <UART_SetConfig+0x10c>)
 800287a:	fba2 3100 	umull	r3, r1, r2, r0
 800287e:	0949      	lsrs	r1, r1, #5
 8002880:	2364      	movs	r3, #100	@ 0x64
 8002882:	fb03 0311 	mls	r3, r3, r1, r0
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	3332      	adds	r3, #50	@ 0x32
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002894:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	6821      	ldr	r1, [r4, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }
}
 80028a2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a4:	2300      	movs	r3, #0
 80028a6:	1802      	adds	r2, r0, r0
 80028a8:	eb43 0103 	adc.w	r1, r3, r3
 80028ac:	1812      	adds	r2, r2, r0
 80028ae:	f141 0100 	adc.w	r1, r1, #0
 80028b2:	00c9      	lsls	r1, r1, #3
 80028b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028b8:	00d2      	lsls	r2, r2, #3
 80028ba:	1810      	adds	r0, r2, r0
 80028bc:	f141 0100 	adc.w	r1, r1, #0
 80028c0:	6862      	ldr	r2, [r4, #4]
 80028c2:	1892      	adds	r2, r2, r2
 80028c4:	415b      	adcs	r3, r3
 80028c6:	f7fe f8f1 	bl	8000aac <__aeabi_uldivmod>
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <UART_SetConfig+0x10c>)
 80028cc:	fba2 3100 	umull	r3, r1, r2, r0
 80028d0:	0949      	lsrs	r1, r1, #5
 80028d2:	2364      	movs	r3, #100	@ 0x64
 80028d4:	fb03 0311 	mls	r3, r3, r1, r0
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	3332      	adds	r3, #50	@ 0x32
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	005a      	lsls	r2, r3, #1
 80028e4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80028e8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	6821      	ldr	r1, [r4, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
 80028f6:	e7d4      	b.n	80028a2 <UART_SetConfig+0xb2>
 80028f8:	40011000 	.word	0x40011000
 80028fc:	51eb851f 	.word	0x51eb851f

08002900 <UART_WaitOnFlagUntilTimeout>:
{
 8002900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002904:	b083      	sub	sp, #12
 8002906:	4605      	mov	r5, r0
 8002908:	460e      	mov	r6, r1
 800290a:	4617      	mov	r7, r2
 800290c:	4699      	mov	r9, r3
 800290e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	681c      	ldr	r4, [r3, #0]
 8002916:	ea36 0404 	bics.w	r4, r6, r4
 800291a:	bf0c      	ite	eq
 800291c:	2401      	moveq	r4, #1
 800291e:	2400      	movne	r4, #0
 8002920:	42bc      	cmp	r4, r7
 8002922:	d128      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002924:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002928:	d0f3      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292a:	f7fe fc3d 	bl	80011a8 <HAL_GetTick>
 800292e:	eba0 0009 	sub.w	r0, r0, r9
 8002932:	4540      	cmp	r0, r8
 8002934:	d823      	bhi.n	800297e <UART_WaitOnFlagUntilTimeout+0x7e>
 8002936:	f1b8 0f00 	cmp.w	r8, #0
 800293a:	d022      	beq.n	8002982 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	f012 0f04 	tst.w	r2, #4
 8002944:	d0e5      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
 8002946:	2e80      	cmp	r6, #128	@ 0x80
 8002948:	d0e3      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
 800294a:	2e40      	cmp	r6, #64	@ 0x40
 800294c:	d0e1      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	f012 0f08 	tst.w	r2, #8
 8002954:	d0dd      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002956:	2400      	movs	r4, #0
 8002958:	9401      	str	r4, [sp, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	9201      	str	r2, [sp, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002964:	4628      	mov	r0, r5
 8002966:	f7ff ff15 	bl	8002794 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800296a:	2308      	movs	r3, #8
 800296c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800296e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
 8002974:	e000      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
}
 8002978:	b003      	add	sp, #12
 800297a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800297e:	2003      	movs	r0, #3
 8002980:	e7fa      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x78>
 8002982:	2003      	movs	r0, #3
 8002984:	e7f8      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x78>

08002986 <HAL_UART_Init>:
  if (huart == NULL)
 8002986:	b360      	cbz	r0, 80029e2 <HAL_UART_Init+0x5c>
{
 8002988:	b510      	push	{r4, lr}
 800298a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800298c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002990:	b313      	cbz	r3, 80029d8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002992:	2324      	movs	r3, #36	@ 0x24
 8002994:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002998:	6822      	ldr	r2, [r4, #0]
 800299a:	68d3      	ldr	r3, [r2, #12]
 800299c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029a0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80029a2:	4620      	mov	r0, r4
 80029a4:	f7ff ff24 	bl	80027f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	6913      	ldr	r3, [r2, #16]
 80029ac:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80029b0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	6822      	ldr	r2, [r4, #0]
 80029b4:	6953      	ldr	r3, [r2, #20]
 80029b6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80029ba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	68d3      	ldr	r3, [r2, #12]
 80029c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029c4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c6:	2000      	movs	r0, #0
 80029c8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029ca:	2320      	movs	r3, #32
 80029cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029d4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80029d6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80029d8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80029dc:	f000 f8d8 	bl	8002b90 <HAL_UART_MspInit>
 80029e0:	e7d7      	b.n	8002992 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80029e2:	2001      	movs	r0, #1
}
 80029e4:	4770      	bx	lr

080029e6 <HAL_UART_Transmit>:
{
 80029e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80029ee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d156      	bne.n	8002aa4 <HAL_UART_Transmit+0xbe>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80029fc:	2900      	cmp	r1, #0
 80029fe:	d055      	beq.n	8002aac <HAL_UART_Transmit+0xc6>
 8002a00:	b90a      	cbnz	r2, 8002a06 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8002a02:	2001      	movs	r0, #1
 8002a04:	e04f      	b.n	8002aa6 <HAL_UART_Transmit+0xc0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0a:	2321      	movs	r3, #33	@ 0x21
 8002a0c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002a10:	f7fe fbca 	bl	80011a8 <HAL_GetTick>
 8002a14:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002a16:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a1a:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1e:	68a3      	ldr	r3, [r4, #8]
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit+0x46>
      pdata16bits = NULL;
 8002a26:	f04f 0800 	mov.w	r8, #0
 8002a2a:	e014      	b.n	8002a56 <HAL_UART_Transmit+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2c:	6923      	ldr	r3, [r4, #16]
 8002a2e:	b32b      	cbz	r3, 8002a7c <HAL_UART_Transmit+0x96>
      pdata16bits = NULL;
 8002a30:	f04f 0800 	mov.w	r8, #0
 8002a34:	e00f      	b.n	8002a56 <HAL_UART_Transmit+0x70>
        huart->gState = HAL_UART_STATE_READY;
 8002a36:	2320      	movs	r3, #32
 8002a38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e032      	b.n	8002aa6 <HAL_UART_Transmit+0xc0>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a40:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002a44:	6822      	ldr	r2, [r4, #0]
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002a4c:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	3a01      	subs	r2, #1
 8002a52:	b292      	uxth	r2, r2
 8002a54:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a56:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b193      	cbz	r3, 8002a82 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a5c:	9600      	str	r6, [sp, #0]
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2200      	movs	r2, #0
 8002a62:	2180      	movs	r1, #128	@ 0x80
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff4b 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d1e3      	bne.n	8002a36 <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d0e6      	beq.n	8002a40 <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a72:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a7a:	e7e7      	b.n	8002a4c <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8002a7c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002a7e:	2500      	movs	r5, #0
 8002a80:	e7e9      	b.n	8002a56 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a82:	9600      	str	r6, [sp, #0]
 8002a84:	463b      	mov	r3, r7
 8002a86:	2200      	movs	r2, #0
 8002a88:	2140      	movs	r1, #64	@ 0x40
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f7ff ff38 	bl	8002900 <UART_WaitOnFlagUntilTimeout>
 8002a90:	b918      	cbnz	r0, 8002a9a <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 8002a92:	2320      	movs	r3, #32
 8002a94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002a98:	e005      	b.n	8002aa6 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002aa4:	2002      	movs	r0, #2
}
 8002aa6:	b002      	add	sp, #8
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002aac:	2001      	movs	r0, #1
 8002aae:	e7fa      	b.n	8002aa6 <HAL_UART_Transmit+0xc0>

08002ab0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <NMI_Handler>

08002ab2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <HardFault_Handler>

08002ab4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <MemManage_Handler>

08002ab6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler>

08002ab8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler>

08002aba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	4770      	bx	lr

08002abc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002abc:	4770      	bx	lr

08002abe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac2:	f7fe fb65 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac6:	bd08      	pop	{r3, pc}

08002ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	460c      	mov	r4, r1
 8002acc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e006      	b.n	8002ae0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002ad2:	f3af 8000 	nop.w
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002ade:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	42b5      	cmp	r5, r6
 8002ae2:	dbf6      	blt.n	8002ad2 <_read+0xa>
  }

  return len;
}
 8002ae4:	4630      	mov	r0, r6
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}

08002ae8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	4770      	bx	lr

08002aee <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002af2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr

08002af8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002af8:	2001      	movs	r0, #1
 8002afa:	4770      	bx	lr

08002afc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002afc:	2000      	movs	r0, #0
 8002afe:	4770      	bx	lr

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b510      	push	{r4, lr}
 8002b02:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <_sbrk+0x38>)
 8002b06:	490d      	ldr	r1, [pc, #52]	@ (8002b3c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b08:	480d      	ldr	r0, [pc, #52]	@ (8002b40 <_sbrk+0x40>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	b140      	cbz	r0, 8002b20 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b0e:	480c      	ldr	r0, [pc, #48]	@ (8002b40 <_sbrk+0x40>)
 8002b10:	6800      	ldr	r0, [r0, #0]
 8002b12:	4403      	add	r3, r0
 8002b14:	1a52      	subs	r2, r2, r1
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d806      	bhi.n	8002b28 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <_sbrk+0x40>)
 8002b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002b1e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002b20:	4807      	ldr	r0, [pc, #28]	@ (8002b40 <_sbrk+0x40>)
 8002b22:	4c08      	ldr	r4, [pc, #32]	@ (8002b44 <_sbrk+0x44>)
 8002b24:	6004      	str	r4, [r0, #0]
 8002b26:	e7f2      	b.n	8002b0e <_sbrk+0xe>
    errno = ENOMEM;
 8002b28:	f000 faec 	bl	8003104 <__errno>
 8002b2c:	230c      	movs	r3, #12
 8002b2e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	e7f3      	b.n	8002b1e <_sbrk+0x1e>
 8002b36:	bf00      	nop
 8002b38:	20020000 	.word	0x20020000
 8002b3c:	00000400 	.word	0x00000400
 8002b40:	200000e8 	.word	0x200000e8
 8002b44:	20000280 	.word	0x20000280

08002b48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4a03      	ldr	r2, [pc, #12]	@ (8002b58 <SystemInit+0x10>)
 8002b4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002b4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b5c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b5e:	480a      	ldr	r0, [pc, #40]	@ (8002b88 <MX_USART2_UART_Init+0x2c>)
 8002b60:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <MX_USART2_UART_Init+0x30>)
 8002b62:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002b64:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002b68:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b6e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b70:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b72:	220c      	movs	r2, #12
 8002b74:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b76:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b7a:	f7ff ff04 	bl	8002986 <HAL_UART_Init>
 8002b7e:	b900      	cbnz	r0, 8002b82 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b80:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b82:	f7fe f97f 	bl	8000e84 <Error_Handler>
}
 8002b86:	e7fb      	b.n	8002b80 <MX_USART2_UART_Init+0x24>
 8002b88:	200000ec 	.word	0x200000ec
 8002b8c:	40004400 	.word	0x40004400

08002b90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b90:	b500      	push	{lr}
 8002b92:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	2300      	movs	r3, #0
 8002b96:	9303      	str	r3, [sp, #12]
 8002b98:	9304      	str	r3, [sp, #16]
 8002b9a:	9305      	str	r3, [sp, #20]
 8002b9c:	9306      	str	r3, [sp, #24]
 8002b9e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART2)
 8002ba0:	6802      	ldr	r2, [r0, #0]
 8002ba2:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_UART_MspInit+0x68>)
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d002      	beq.n	8002bae <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ba8:	b009      	add	sp, #36	@ 0x24
 8002baa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bae:	2100      	movs	r1, #0
 8002bb0:	9101      	str	r1, [sp, #4]
 8002bb2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8002bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bb8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002bbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	9102      	str	r1, [sp, #8]
 8002bca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	9302      	str	r3, [sp, #8]
 8002bda:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bdc:	230c      	movs	r3, #12
 8002bde:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002be8:	2307      	movs	r3, #7
 8002bea:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	a903      	add	r1, sp, #12
 8002bee:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <HAL_UART_MspInit+0x6c>)
 8002bf0:	f7fe fb5e 	bl	80012b0 <HAL_GPIO_Init>
}
 8002bf4:	e7d8      	b.n	8002ba8 <HAL_UART_MspInit+0x18>
 8002bf6:	bf00      	nop
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	40020000 	.word	0x40020000

08002c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c04:	f7ff ffa0 	bl	8002b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c08:	480c      	ldr	r0, [pc, #48]	@ (8002c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c0a:	490d      	ldr	r1, [pc, #52]	@ (8002c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c20:	4c0a      	ldr	r4, [pc, #40]	@ (8002c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f000 fa6f 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c32:	f7fe f96d 	bl	8000f10 <main>
  bx  lr    
 8002c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002c44:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 8002c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002c4c:	20000280 	.word	0x20000280

08002c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC_IRQHandler>
	...

08002c54 <std>:
 8002c54:	2300      	movs	r3, #0
 8002c56:	b510      	push	{r4, lr}
 8002c58:	4604      	mov	r4, r0
 8002c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c62:	6083      	str	r3, [r0, #8]
 8002c64:	8181      	strh	r1, [r0, #12]
 8002c66:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c68:	81c2      	strh	r2, [r0, #14]
 8002c6a:	6183      	str	r3, [r0, #24]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	2208      	movs	r2, #8
 8002c70:	305c      	adds	r0, #92	@ 0x5c
 8002c72:	f000 f9f9 	bl	8003068 <memset>
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <std+0x58>)
 8002c78:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <std+0x5c>)
 8002c7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <std+0x60>)
 8002c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c82:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb8 <std+0x64>)
 8002c84:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <std+0x68>)
 8002c88:	6224      	str	r4, [r4, #32]
 8002c8a:	429c      	cmp	r4, r3
 8002c8c:	d006      	beq.n	8002c9c <std+0x48>
 8002c8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c92:	4294      	cmp	r4, r2
 8002c94:	d002      	beq.n	8002c9c <std+0x48>
 8002c96:	33d0      	adds	r3, #208	@ 0xd0
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	d105      	bne.n	8002ca8 <std+0x54>
 8002c9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca4:	f000 ba58 	b.w	8003158 <__retarget_lock_init_recursive>
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	bf00      	nop
 8002cac:	08002ebd 	.word	0x08002ebd
 8002cb0:	08002edf 	.word	0x08002edf
 8002cb4:	08002f17 	.word	0x08002f17
 8002cb8:	08002f3d 	.word	0x08002f3d
 8002cbc:	20000134 	.word	0x20000134

08002cc0 <stdio_exit_handler>:
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <stdio_exit_handler+0xc>)
 8002cc2:	4903      	ldr	r1, [pc, #12]	@ (8002cd0 <stdio_exit_handler+0x10>)
 8002cc4:	4803      	ldr	r0, [pc, #12]	@ (8002cd4 <stdio_exit_handler+0x14>)
 8002cc6:	f000 b86b 	b.w	8002da0 <_fwalk_sglue>
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	080039f5 	.word	0x080039f5
 8002cd4:	2000001c 	.word	0x2000001c

08002cd8 <cleanup_stdio>:
 8002cd8:	6841      	ldr	r1, [r0, #4]
 8002cda:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <cleanup_stdio+0x34>)
 8002cdc:	4299      	cmp	r1, r3
 8002cde:	b510      	push	{r4, lr}
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	d001      	beq.n	8002ce8 <cleanup_stdio+0x10>
 8002ce4:	f000 fe86 	bl	80039f4 <_fflush_r>
 8002ce8:	68a1      	ldr	r1, [r4, #8]
 8002cea:	4b09      	ldr	r3, [pc, #36]	@ (8002d10 <cleanup_stdio+0x38>)
 8002cec:	4299      	cmp	r1, r3
 8002cee:	d002      	beq.n	8002cf6 <cleanup_stdio+0x1e>
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f000 fe7f 	bl	80039f4 <_fflush_r>
 8002cf6:	68e1      	ldr	r1, [r4, #12]
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <cleanup_stdio+0x3c>)
 8002cfa:	4299      	cmp	r1, r3
 8002cfc:	d004      	beq.n	8002d08 <cleanup_stdio+0x30>
 8002cfe:	4620      	mov	r0, r4
 8002d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d04:	f000 be76 	b.w	80039f4 <_fflush_r>
 8002d08:	bd10      	pop	{r4, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000134 	.word	0x20000134
 8002d10:	2000019c 	.word	0x2000019c
 8002d14:	20000204 	.word	0x20000204

08002d18 <global_stdio_init.part.0>:
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <global_stdio_init.part.0+0x34>)
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <global_stdio_init.part.0+0x38>)
 8002d1c:	480d      	ldr	r0, [pc, #52]	@ (8002d54 <global_stdio_init.part.0+0x3c>)
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	2104      	movs	r1, #4
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f7ff ff95 	bl	8002c54 <std>
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <global_stdio_init.part.0+0x3c>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	461c      	mov	r4, r3
 8002d30:	2109      	movs	r1, #9
 8002d32:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002d36:	f7ff ff8d 	bl	8002c54 <std>
 8002d3a:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d3e:	2202      	movs	r2, #2
 8002d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d44:	2112      	movs	r1, #18
 8002d46:	f7ff bf85 	b.w	8002c54 <std>
 8002d4a:	bf00      	nop
 8002d4c:	2000026c 	.word	0x2000026c
 8002d50:	08002cc1 	.word	0x08002cc1
 8002d54:	20000134 	.word	0x20000134

08002d58 <__sfp_lock_acquire>:
 8002d58:	4801      	ldr	r0, [pc, #4]	@ (8002d60 <__sfp_lock_acquire+0x8>)
 8002d5a:	f000 b9fe 	b.w	800315a <__retarget_lock_acquire_recursive>
 8002d5e:	bf00      	nop
 8002d60:	20000275 	.word	0x20000275

08002d64 <__sfp_lock_release>:
 8002d64:	4801      	ldr	r0, [pc, #4]	@ (8002d6c <__sfp_lock_release+0x8>)
 8002d66:	f000 b9f9 	b.w	800315c <__retarget_lock_release_recursive>
 8002d6a:	bf00      	nop
 8002d6c:	20000275 	.word	0x20000275

08002d70 <__sinit>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	4604      	mov	r4, r0
 8002d74:	f7ff fff0 	bl	8002d58 <__sfp_lock_acquire>
 8002d78:	6a23      	ldr	r3, [r4, #32]
 8002d7a:	b11b      	cbz	r3, 8002d84 <__sinit+0x14>
 8002d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d80:	f7ff bff0 	b.w	8002d64 <__sfp_lock_release>
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <__sinit+0x28>)
 8002d86:	6223      	str	r3, [r4, #32]
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <__sinit+0x2c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f5      	bne.n	8002d7c <__sinit+0xc>
 8002d90:	f7ff ffc2 	bl	8002d18 <global_stdio_init.part.0>
 8002d94:	e7f2      	b.n	8002d7c <__sinit+0xc>
 8002d96:	bf00      	nop
 8002d98:	08002cd9 	.word	0x08002cd9
 8002d9c:	2000026c 	.word	0x2000026c

08002da0 <_fwalk_sglue>:
 8002da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002da4:	4607      	mov	r7, r0
 8002da6:	4688      	mov	r8, r1
 8002da8:	4614      	mov	r4, r2
 8002daa:	2600      	movs	r6, #0
 8002dac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002db0:	f1b9 0901 	subs.w	r9, r9, #1
 8002db4:	d505      	bpl.n	8002dc2 <_fwalk_sglue+0x22>
 8002db6:	6824      	ldr	r4, [r4, #0]
 8002db8:	2c00      	cmp	r4, #0
 8002dba:	d1f7      	bne.n	8002dac <_fwalk_sglue+0xc>
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dc2:	89ab      	ldrh	r3, [r5, #12]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d907      	bls.n	8002dd8 <_fwalk_sglue+0x38>
 8002dc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	d003      	beq.n	8002dd8 <_fwalk_sglue+0x38>
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	47c0      	blx	r8
 8002dd6:	4306      	orrs	r6, r0
 8002dd8:	3568      	adds	r5, #104	@ 0x68
 8002dda:	e7e9      	b.n	8002db0 <_fwalk_sglue+0x10>

08002ddc <iprintf>:
 8002ddc:	b40f      	push	{r0, r1, r2, r3}
 8002dde:	b507      	push	{r0, r1, r2, lr}
 8002de0:	4906      	ldr	r1, [pc, #24]	@ (8002dfc <iprintf+0x20>)
 8002de2:	ab04      	add	r3, sp, #16
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dea:	6881      	ldr	r1, [r0, #8]
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	f000 fad9 	bl	80033a4 <_vfiprintf_r>
 8002df2:	b003      	add	sp, #12
 8002df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002df8:	b004      	add	sp, #16
 8002dfa:	4770      	bx	lr
 8002dfc:	20000018 	.word	0x20000018

08002e00 <_puts_r>:
 8002e00:	6a03      	ldr	r3, [r0, #32]
 8002e02:	b570      	push	{r4, r5, r6, lr}
 8002e04:	6884      	ldr	r4, [r0, #8]
 8002e06:	4605      	mov	r5, r0
 8002e08:	460e      	mov	r6, r1
 8002e0a:	b90b      	cbnz	r3, 8002e10 <_puts_r+0x10>
 8002e0c:	f7ff ffb0 	bl	8002d70 <__sinit>
 8002e10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d405      	bmi.n	8002e22 <_puts_r+0x22>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	0598      	lsls	r0, r3, #22
 8002e1a:	d402      	bmi.n	8002e22 <_puts_r+0x22>
 8002e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e1e:	f000 f99c 	bl	800315a <__retarget_lock_acquire_recursive>
 8002e22:	89a3      	ldrh	r3, [r4, #12]
 8002e24:	0719      	lsls	r1, r3, #28
 8002e26:	d502      	bpl.n	8002e2e <_puts_r+0x2e>
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d135      	bne.n	8002e9a <_puts_r+0x9a>
 8002e2e:	4621      	mov	r1, r4
 8002e30:	4628      	mov	r0, r5
 8002e32:	f000 f8c5 	bl	8002fc0 <__swsetup_r>
 8002e36:	b380      	cbz	r0, 8002e9a <_puts_r+0x9a>
 8002e38:	f04f 35ff 	mov.w	r5, #4294967295
 8002e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e3e:	07da      	lsls	r2, r3, #31
 8002e40:	d405      	bmi.n	8002e4e <_puts_r+0x4e>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	059b      	lsls	r3, r3, #22
 8002e46:	d402      	bmi.n	8002e4e <_puts_r+0x4e>
 8002e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e4a:	f000 f987 	bl	800315c <__retarget_lock_release_recursive>
 8002e4e:	4628      	mov	r0, r5
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da04      	bge.n	8002e60 <_puts_r+0x60>
 8002e56:	69a2      	ldr	r2, [r4, #24]
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	db17      	blt.n	8002e8c <_puts_r+0x8c>
 8002e5c:	290a      	cmp	r1, #10
 8002e5e:	d015      	beq.n	8002e8c <_puts_r+0x8c>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	6022      	str	r2, [r4, #0]
 8002e66:	7019      	strb	r1, [r3, #0]
 8002e68:	68a3      	ldr	r3, [r4, #8]
 8002e6a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60a3      	str	r3, [r4, #8]
 8002e72:	2900      	cmp	r1, #0
 8002e74:	d1ed      	bne.n	8002e52 <_puts_r+0x52>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da11      	bge.n	8002e9e <_puts_r+0x9e>
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	210a      	movs	r1, #10
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 f860 	bl	8002f44 <__swbuf_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d0d7      	beq.n	8002e38 <_puts_r+0x38>
 8002e88:	250a      	movs	r5, #10
 8002e8a:	e7d7      	b.n	8002e3c <_puts_r+0x3c>
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f000 f858 	bl	8002f44 <__swbuf_r>
 8002e94:	3001      	adds	r0, #1
 8002e96:	d1e7      	bne.n	8002e68 <_puts_r+0x68>
 8002e98:	e7ce      	b.n	8002e38 <_puts_r+0x38>
 8002e9a:	3e01      	subs	r6, #1
 8002e9c:	e7e4      	b.n	8002e68 <_puts_r+0x68>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	6022      	str	r2, [r4, #0]
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e7ee      	b.n	8002e88 <_puts_r+0x88>
	...

08002eac <puts>:
 8002eac:	4b02      	ldr	r3, [pc, #8]	@ (8002eb8 <puts+0xc>)
 8002eae:	4601      	mov	r1, r0
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	f7ff bfa5 	b.w	8002e00 <_puts_r>
 8002eb6:	bf00      	nop
 8002eb8:	20000018 	.word	0x20000018

08002ebc <__sread>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec4:	f000 f8fa 	bl	80030bc <_read_r>
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	bfab      	itete	ge
 8002ecc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ece:	89a3      	ldrhlt	r3, [r4, #12]
 8002ed0:	181b      	addge	r3, r3, r0
 8002ed2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ed6:	bfac      	ite	ge
 8002ed8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002eda:	81a3      	strhlt	r3, [r4, #12]
 8002edc:	bd10      	pop	{r4, pc}

08002ede <__swrite>:
 8002ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee2:	461f      	mov	r7, r3
 8002ee4:	898b      	ldrh	r3, [r1, #12]
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	4605      	mov	r5, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	4616      	mov	r6, r2
 8002eee:	d505      	bpl.n	8002efc <__swrite+0x1e>
 8002ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f000 f8ce 	bl	8003098 <_lseek_r>
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f06:	81a3      	strh	r3, [r4, #12]
 8002f08:	4632      	mov	r2, r6
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f12:	f000 b8e5 	b.w	80030e0 <_write_r>

08002f16 <__sseek>:
 8002f16:	b510      	push	{r4, lr}
 8002f18:	460c      	mov	r4, r1
 8002f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f1e:	f000 f8bb 	bl	8003098 <_lseek_r>
 8002f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f26:	1c42      	adds	r2, r0, #1
 8002f28:	bf0b      	itete	eq
 8002f2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f32:	81a3      	strheq	r3, [r4, #12]
 8002f34:	81a3      	strhne	r3, [r4, #12]
 8002f36:	bf18      	it	ne
 8002f38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f3a:	bd10      	pop	{r4, pc}

08002f3c <__sclose>:
 8002f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f40:	f000 b89a 	b.w	8003078 <_close_r>

08002f44 <__swbuf_r>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	460e      	mov	r6, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	b118      	cbz	r0, 8002f56 <__swbuf_r+0x12>
 8002f4e:	6a03      	ldr	r3, [r0, #32]
 8002f50:	b90b      	cbnz	r3, 8002f56 <__swbuf_r+0x12>
 8002f52:	f7ff ff0d 	bl	8002d70 <__sinit>
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	60a3      	str	r3, [r4, #8]
 8002f5a:	89a3      	ldrh	r3, [r4, #12]
 8002f5c:	071a      	lsls	r2, r3, #28
 8002f5e:	d501      	bpl.n	8002f64 <__swbuf_r+0x20>
 8002f60:	6923      	ldr	r3, [r4, #16]
 8002f62:	b943      	cbnz	r3, 8002f76 <__swbuf_r+0x32>
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	f000 f82a 	bl	8002fc0 <__swsetup_r>
 8002f6c:	b118      	cbz	r0, 8002f76 <__swbuf_r+0x32>
 8002f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f72:	4638      	mov	r0, r7
 8002f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	6922      	ldr	r2, [r4, #16]
 8002f7a:	1a98      	subs	r0, r3, r2
 8002f7c:	6963      	ldr	r3, [r4, #20]
 8002f7e:	b2f6      	uxtb	r6, r6
 8002f80:	4283      	cmp	r3, r0
 8002f82:	4637      	mov	r7, r6
 8002f84:	dc05      	bgt.n	8002f92 <__swbuf_r+0x4e>
 8002f86:	4621      	mov	r1, r4
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f000 fd33 	bl	80039f4 <_fflush_r>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d1ed      	bne.n	8002f6e <__swbuf_r+0x2a>
 8002f92:	68a3      	ldr	r3, [r4, #8]
 8002f94:	3b01      	subs	r3, #1
 8002f96:	60a3      	str	r3, [r4, #8]
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	6022      	str	r2, [r4, #0]
 8002f9e:	701e      	strb	r6, [r3, #0]
 8002fa0:	6962      	ldr	r2, [r4, #20]
 8002fa2:	1c43      	adds	r3, r0, #1
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <__swbuf_r+0x6e>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	07db      	lsls	r3, r3, #31
 8002fac:	d5e1      	bpl.n	8002f72 <__swbuf_r+0x2e>
 8002fae:	2e0a      	cmp	r6, #10
 8002fb0:	d1df      	bne.n	8002f72 <__swbuf_r+0x2e>
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f000 fd1d 	bl	80039f4 <_fflush_r>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d0d9      	beq.n	8002f72 <__swbuf_r+0x2e>
 8002fbe:	e7d6      	b.n	8002f6e <__swbuf_r+0x2a>

08002fc0 <__swsetup_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <__swsetup_r+0xa4>)
 8002fc4:	4605      	mov	r5, r0
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	460c      	mov	r4, r1
 8002fca:	b118      	cbz	r0, 8002fd4 <__swsetup_r+0x14>
 8002fcc:	6a03      	ldr	r3, [r0, #32]
 8002fce:	b90b      	cbnz	r3, 8002fd4 <__swsetup_r+0x14>
 8002fd0:	f7ff fece 	bl	8002d70 <__sinit>
 8002fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fd8:	071a      	lsls	r2, r3, #28
 8002fda:	d421      	bmi.n	8003020 <__swsetup_r+0x60>
 8002fdc:	06d8      	lsls	r0, r3, #27
 8002fde:	d407      	bmi.n	8002ff0 <__swsetup_r+0x30>
 8002fe0:	2209      	movs	r2, #9
 8002fe2:	602a      	str	r2, [r5, #0]
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe8:	81a3      	strh	r3, [r4, #12]
 8002fea:	f04f 30ff 	mov.w	r0, #4294967295
 8002fee:	e030      	b.n	8003052 <__swsetup_r+0x92>
 8002ff0:	0759      	lsls	r1, r3, #29
 8002ff2:	d512      	bpl.n	800301a <__swsetup_r+0x5a>
 8002ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ff6:	b141      	cbz	r1, 800300a <__swsetup_r+0x4a>
 8002ff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ffc:	4299      	cmp	r1, r3
 8002ffe:	d002      	beq.n	8003006 <__swsetup_r+0x46>
 8003000:	4628      	mov	r0, r5
 8003002:	f000 f8ad 	bl	8003160 <_free_r>
 8003006:	2300      	movs	r3, #0
 8003008:	6363      	str	r3, [r4, #52]	@ 0x34
 800300a:	2200      	movs	r2, #0
 800300c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003010:	6062      	str	r2, [r4, #4]
 8003012:	6922      	ldr	r2, [r4, #16]
 8003014:	6022      	str	r2, [r4, #0]
 8003016:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	6922      	ldr	r2, [r4, #16]
 8003022:	b93a      	cbnz	r2, 8003034 <__swsetup_r+0x74>
 8003024:	059a      	lsls	r2, r3, #22
 8003026:	d501      	bpl.n	800302c <__swsetup_r+0x6c>
 8003028:	0618      	lsls	r0, r3, #24
 800302a:	d503      	bpl.n	8003034 <__swsetup_r+0x74>
 800302c:	4621      	mov	r1, r4
 800302e:	4628      	mov	r0, r5
 8003030:	f000 fd2c 	bl	8003a8c <__smakebuf_r>
 8003034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003038:	f013 0201 	ands.w	r2, r3, #1
 800303c:	d00a      	beq.n	8003054 <__swsetup_r+0x94>
 800303e:	2200      	movs	r2, #0
 8003040:	60a2      	str	r2, [r4, #8]
 8003042:	6962      	ldr	r2, [r4, #20]
 8003044:	4252      	negs	r2, r2
 8003046:	61a2      	str	r2, [r4, #24]
 8003048:	6922      	ldr	r2, [r4, #16]
 800304a:	b942      	cbnz	r2, 800305e <__swsetup_r+0x9e>
 800304c:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003050:	d1c8      	bne.n	8002fe4 <__swsetup_r+0x24>
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	0799      	lsls	r1, r3, #30
 8003056:	bf58      	it	pl
 8003058:	6962      	ldrpl	r2, [r4, #20]
 800305a:	60a2      	str	r2, [r4, #8]
 800305c:	e7f4      	b.n	8003048 <__swsetup_r+0x88>
 800305e:	2000      	movs	r0, #0
 8003060:	e7f7      	b.n	8003052 <__swsetup_r+0x92>
 8003062:	bf00      	nop
 8003064:	20000018 	.word	0x20000018

08003068 <memset>:
 8003068:	4402      	add	r2, r0
 800306a:	4603      	mov	r3, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <_close_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4d06      	ldr	r5, [pc, #24]	@ (8003094 <_close_r+0x1c>)
 800307c:	2300      	movs	r3, #0
 800307e:	4604      	mov	r4, r0
 8003080:	4608      	mov	r0, r1
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	f7ff fd30 	bl	8002ae8 <_close>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d102      	bne.n	8003092 <_close_r+0x1a>
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	b103      	cbz	r3, 8003092 <_close_r+0x1a>
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	20000270 	.word	0x20000270

08003098 <_lseek_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4d07      	ldr	r5, [pc, #28]	@ (80030b8 <_lseek_r+0x20>)
 800309c:	4604      	mov	r4, r0
 800309e:	4608      	mov	r0, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f7ff fd28 	bl	8002afc <_lseek>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_lseek_r+0x1e>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_lseek_r+0x1e>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000270 	.word	0x20000270

080030bc <_read_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4d07      	ldr	r5, [pc, #28]	@ (80030dc <_read_r+0x20>)
 80030c0:	4604      	mov	r4, r0
 80030c2:	4608      	mov	r0, r1
 80030c4:	4611      	mov	r1, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	602a      	str	r2, [r5, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f7ff fcfc 	bl	8002ac8 <_read>
 80030d0:	1c43      	adds	r3, r0, #1
 80030d2:	d102      	bne.n	80030da <_read_r+0x1e>
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	b103      	cbz	r3, 80030da <_read_r+0x1e>
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	20000270 	.word	0x20000270

080030e0 <_write_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	4d07      	ldr	r5, [pc, #28]	@ (8003100 <_write_r+0x20>)
 80030e4:	4604      	mov	r4, r0
 80030e6:	4608      	mov	r0, r1
 80030e8:	4611      	mov	r1, r2
 80030ea:	2200      	movs	r2, #0
 80030ec:	602a      	str	r2, [r5, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f7fd febc 	bl	8000e6c <_write>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d102      	bne.n	80030fe <_write_r+0x1e>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	b103      	cbz	r3, 80030fe <_write_r+0x1e>
 80030fc:	6023      	str	r3, [r4, #0]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	20000270 	.word	0x20000270

08003104 <__errno>:
 8003104:	4b01      	ldr	r3, [pc, #4]	@ (800310c <__errno+0x8>)
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000018 	.word	0x20000018

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <__libc_init_array+0x38>)
 8003114:	4d0d      	ldr	r5, [pc, #52]	@ (800314c <__libc_init_array+0x3c>)
 8003116:	1b5b      	subs	r3, r3, r5
 8003118:	109c      	asrs	r4, r3, #2
 800311a:	2600      	movs	r6, #0
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	f000 fe9c 	bl	8003e5c <_init>
 8003124:	4d0a      	ldr	r5, [pc, #40]	@ (8003150 <__libc_init_array+0x40>)
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <__libc_init_array+0x44>)
 8003128:	1b5b      	subs	r3, r3, r5
 800312a:	109c      	asrs	r4, r3, #2
 800312c:	2600      	movs	r6, #0
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	f855 3b04 	ldr.w	r3, [r5], #4
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	080040f4 	.word	0x080040f4
 800314c:	080040f4 	.word	0x080040f4
 8003150:	080040f4 	.word	0x080040f4
 8003154:	080040f8 	.word	0x080040f8

08003158 <__retarget_lock_init_recursive>:
 8003158:	4770      	bx	lr

0800315a <__retarget_lock_acquire_recursive>:
 800315a:	4770      	bx	lr

0800315c <__retarget_lock_release_recursive>:
 800315c:	4770      	bx	lr
	...

08003160 <_free_r>:
 8003160:	b538      	push	{r3, r4, r5, lr}
 8003162:	4605      	mov	r5, r0
 8003164:	2900      	cmp	r1, #0
 8003166:	d041      	beq.n	80031ec <_free_r+0x8c>
 8003168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316c:	1f0c      	subs	r4, r1, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfb8      	it	lt
 8003172:	18e4      	addlt	r4, r4, r3
 8003174:	f000 f8e0 	bl	8003338 <__malloc_lock>
 8003178:	4a1d      	ldr	r2, [pc, #116]	@ (80031f0 <_free_r+0x90>)
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	b933      	cbnz	r3, 800318c <_free_r+0x2c>
 800317e:	6063      	str	r3, [r4, #4]
 8003180:	6014      	str	r4, [r2, #0]
 8003182:	4628      	mov	r0, r5
 8003184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003188:	f000 b8dc 	b.w	8003344 <__malloc_unlock>
 800318c:	42a3      	cmp	r3, r4
 800318e:	d908      	bls.n	80031a2 <_free_r+0x42>
 8003190:	6820      	ldr	r0, [r4, #0]
 8003192:	1821      	adds	r1, r4, r0
 8003194:	428b      	cmp	r3, r1
 8003196:	bf01      	itttt	eq
 8003198:	6819      	ldreq	r1, [r3, #0]
 800319a:	685b      	ldreq	r3, [r3, #4]
 800319c:	1809      	addeq	r1, r1, r0
 800319e:	6021      	streq	r1, [r4, #0]
 80031a0:	e7ed      	b.n	800317e <_free_r+0x1e>
 80031a2:	461a      	mov	r2, r3
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	b10b      	cbz	r3, 80031ac <_free_r+0x4c>
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	d9fa      	bls.n	80031a2 <_free_r+0x42>
 80031ac:	6811      	ldr	r1, [r2, #0]
 80031ae:	1850      	adds	r0, r2, r1
 80031b0:	42a0      	cmp	r0, r4
 80031b2:	d10b      	bne.n	80031cc <_free_r+0x6c>
 80031b4:	6820      	ldr	r0, [r4, #0]
 80031b6:	4401      	add	r1, r0
 80031b8:	1850      	adds	r0, r2, r1
 80031ba:	4283      	cmp	r3, r0
 80031bc:	6011      	str	r1, [r2, #0]
 80031be:	d1e0      	bne.n	8003182 <_free_r+0x22>
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	6053      	str	r3, [r2, #4]
 80031c6:	4408      	add	r0, r1
 80031c8:	6010      	str	r0, [r2, #0]
 80031ca:	e7da      	b.n	8003182 <_free_r+0x22>
 80031cc:	d902      	bls.n	80031d4 <_free_r+0x74>
 80031ce:	230c      	movs	r3, #12
 80031d0:	602b      	str	r3, [r5, #0]
 80031d2:	e7d6      	b.n	8003182 <_free_r+0x22>
 80031d4:	6820      	ldr	r0, [r4, #0]
 80031d6:	1821      	adds	r1, r4, r0
 80031d8:	428b      	cmp	r3, r1
 80031da:	bf04      	itt	eq
 80031dc:	6819      	ldreq	r1, [r3, #0]
 80031de:	685b      	ldreq	r3, [r3, #4]
 80031e0:	6063      	str	r3, [r4, #4]
 80031e2:	bf04      	itt	eq
 80031e4:	1809      	addeq	r1, r1, r0
 80031e6:	6021      	streq	r1, [r4, #0]
 80031e8:	6054      	str	r4, [r2, #4]
 80031ea:	e7ca      	b.n	8003182 <_free_r+0x22>
 80031ec:	bd38      	pop	{r3, r4, r5, pc}
 80031ee:	bf00      	nop
 80031f0:	2000027c 	.word	0x2000027c

080031f4 <sbrk_aligned>:
 80031f4:	b570      	push	{r4, r5, r6, lr}
 80031f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003234 <sbrk_aligned+0x40>)
 80031f8:	460c      	mov	r4, r1
 80031fa:	6831      	ldr	r1, [r6, #0]
 80031fc:	4605      	mov	r5, r0
 80031fe:	b911      	cbnz	r1, 8003206 <sbrk_aligned+0x12>
 8003200:	f000 fca0 	bl	8003b44 <_sbrk_r>
 8003204:	6030      	str	r0, [r6, #0]
 8003206:	4621      	mov	r1, r4
 8003208:	4628      	mov	r0, r5
 800320a:	f000 fc9b 	bl	8003b44 <_sbrk_r>
 800320e:	1c43      	adds	r3, r0, #1
 8003210:	d103      	bne.n	800321a <sbrk_aligned+0x26>
 8003212:	f04f 34ff 	mov.w	r4, #4294967295
 8003216:	4620      	mov	r0, r4
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	1cc4      	adds	r4, r0, #3
 800321c:	f024 0403 	bic.w	r4, r4, #3
 8003220:	42a0      	cmp	r0, r4
 8003222:	d0f8      	beq.n	8003216 <sbrk_aligned+0x22>
 8003224:	1a21      	subs	r1, r4, r0
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fc8c 	bl	8003b44 <_sbrk_r>
 800322c:	3001      	adds	r0, #1
 800322e:	d1f2      	bne.n	8003216 <sbrk_aligned+0x22>
 8003230:	e7ef      	b.n	8003212 <sbrk_aligned+0x1e>
 8003232:	bf00      	nop
 8003234:	20000278 	.word	0x20000278

08003238 <_malloc_r>:
 8003238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800323c:	1ccd      	adds	r5, r1, #3
 800323e:	f025 0503 	bic.w	r5, r5, #3
 8003242:	3508      	adds	r5, #8
 8003244:	2d0c      	cmp	r5, #12
 8003246:	bf38      	it	cc
 8003248:	250c      	movcc	r5, #12
 800324a:	2d00      	cmp	r5, #0
 800324c:	4606      	mov	r6, r0
 800324e:	db01      	blt.n	8003254 <_malloc_r+0x1c>
 8003250:	42a9      	cmp	r1, r5
 8003252:	d904      	bls.n	800325e <_malloc_r+0x26>
 8003254:	230c      	movs	r3, #12
 8003256:	6033      	str	r3, [r6, #0]
 8003258:	2000      	movs	r0, #0
 800325a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800325e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003334 <_malloc_r+0xfc>
 8003262:	f000 f869 	bl	8003338 <__malloc_lock>
 8003266:	f8d8 3000 	ldr.w	r3, [r8]
 800326a:	461c      	mov	r4, r3
 800326c:	bb44      	cbnz	r4, 80032c0 <_malloc_r+0x88>
 800326e:	4629      	mov	r1, r5
 8003270:	4630      	mov	r0, r6
 8003272:	f7ff ffbf 	bl	80031f4 <sbrk_aligned>
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	4604      	mov	r4, r0
 800327a:	d158      	bne.n	800332e <_malloc_r+0xf6>
 800327c:	f8d8 4000 	ldr.w	r4, [r8]
 8003280:	4627      	mov	r7, r4
 8003282:	2f00      	cmp	r7, #0
 8003284:	d143      	bne.n	800330e <_malloc_r+0xd6>
 8003286:	2c00      	cmp	r4, #0
 8003288:	d04b      	beq.n	8003322 <_malloc_r+0xea>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	4639      	mov	r1, r7
 800328e:	4630      	mov	r0, r6
 8003290:	eb04 0903 	add.w	r9, r4, r3
 8003294:	f000 fc56 	bl	8003b44 <_sbrk_r>
 8003298:	4581      	cmp	r9, r0
 800329a:	d142      	bne.n	8003322 <_malloc_r+0xea>
 800329c:	6821      	ldr	r1, [r4, #0]
 800329e:	1a6d      	subs	r5, r5, r1
 80032a0:	4629      	mov	r1, r5
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7ff ffa6 	bl	80031f4 <sbrk_aligned>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d03a      	beq.n	8003322 <_malloc_r+0xea>
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	442b      	add	r3, r5
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	f8d8 3000 	ldr.w	r3, [r8]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	bb62      	cbnz	r2, 8003314 <_malloc_r+0xdc>
 80032ba:	f8c8 7000 	str.w	r7, [r8]
 80032be:	e00f      	b.n	80032e0 <_malloc_r+0xa8>
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	1b52      	subs	r2, r2, r5
 80032c4:	d420      	bmi.n	8003308 <_malloc_r+0xd0>
 80032c6:	2a0b      	cmp	r2, #11
 80032c8:	d917      	bls.n	80032fa <_malloc_r+0xc2>
 80032ca:	1961      	adds	r1, r4, r5
 80032cc:	42a3      	cmp	r3, r4
 80032ce:	6025      	str	r5, [r4, #0]
 80032d0:	bf18      	it	ne
 80032d2:	6059      	strne	r1, [r3, #4]
 80032d4:	6863      	ldr	r3, [r4, #4]
 80032d6:	bf08      	it	eq
 80032d8:	f8c8 1000 	streq.w	r1, [r8]
 80032dc:	5162      	str	r2, [r4, r5]
 80032de:	604b      	str	r3, [r1, #4]
 80032e0:	4630      	mov	r0, r6
 80032e2:	f000 f82f 	bl	8003344 <__malloc_unlock>
 80032e6:	f104 000b 	add.w	r0, r4, #11
 80032ea:	1d23      	adds	r3, r4, #4
 80032ec:	f020 0007 	bic.w	r0, r0, #7
 80032f0:	1ac2      	subs	r2, r0, r3
 80032f2:	bf1c      	itt	ne
 80032f4:	1a1b      	subne	r3, r3, r0
 80032f6:	50a3      	strne	r3, [r4, r2]
 80032f8:	e7af      	b.n	800325a <_malloc_r+0x22>
 80032fa:	6862      	ldr	r2, [r4, #4]
 80032fc:	42a3      	cmp	r3, r4
 80032fe:	bf0c      	ite	eq
 8003300:	f8c8 2000 	streq.w	r2, [r8]
 8003304:	605a      	strne	r2, [r3, #4]
 8003306:	e7eb      	b.n	80032e0 <_malloc_r+0xa8>
 8003308:	4623      	mov	r3, r4
 800330a:	6864      	ldr	r4, [r4, #4]
 800330c:	e7ae      	b.n	800326c <_malloc_r+0x34>
 800330e:	463c      	mov	r4, r7
 8003310:	687f      	ldr	r7, [r7, #4]
 8003312:	e7b6      	b.n	8003282 <_malloc_r+0x4a>
 8003314:	461a      	mov	r2, r3
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	42a3      	cmp	r3, r4
 800331a:	d1fb      	bne.n	8003314 <_malloc_r+0xdc>
 800331c:	2300      	movs	r3, #0
 800331e:	6053      	str	r3, [r2, #4]
 8003320:	e7de      	b.n	80032e0 <_malloc_r+0xa8>
 8003322:	230c      	movs	r3, #12
 8003324:	6033      	str	r3, [r6, #0]
 8003326:	4630      	mov	r0, r6
 8003328:	f000 f80c 	bl	8003344 <__malloc_unlock>
 800332c:	e794      	b.n	8003258 <_malloc_r+0x20>
 800332e:	6005      	str	r5, [r0, #0]
 8003330:	e7d6      	b.n	80032e0 <_malloc_r+0xa8>
 8003332:	bf00      	nop
 8003334:	2000027c 	.word	0x2000027c

08003338 <__malloc_lock>:
 8003338:	4801      	ldr	r0, [pc, #4]	@ (8003340 <__malloc_lock+0x8>)
 800333a:	f7ff bf0e 	b.w	800315a <__retarget_lock_acquire_recursive>
 800333e:	bf00      	nop
 8003340:	20000274 	.word	0x20000274

08003344 <__malloc_unlock>:
 8003344:	4801      	ldr	r0, [pc, #4]	@ (800334c <__malloc_unlock+0x8>)
 8003346:	f7ff bf09 	b.w	800315c <__retarget_lock_release_recursive>
 800334a:	bf00      	nop
 800334c:	20000274 	.word	0x20000274

08003350 <__sfputc_r>:
 8003350:	6893      	ldr	r3, [r2, #8]
 8003352:	3b01      	subs	r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	b410      	push	{r4}
 8003358:	6093      	str	r3, [r2, #8]
 800335a:	da08      	bge.n	800336e <__sfputc_r+0x1e>
 800335c:	6994      	ldr	r4, [r2, #24]
 800335e:	42a3      	cmp	r3, r4
 8003360:	db01      	blt.n	8003366 <__sfputc_r+0x16>
 8003362:	290a      	cmp	r1, #10
 8003364:	d103      	bne.n	800336e <__sfputc_r+0x1e>
 8003366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800336a:	f7ff bdeb 	b.w	8002f44 <__swbuf_r>
 800336e:	6813      	ldr	r3, [r2, #0]
 8003370:	1c58      	adds	r0, r3, #1
 8003372:	6010      	str	r0, [r2, #0]
 8003374:	7019      	strb	r1, [r3, #0]
 8003376:	4608      	mov	r0, r1
 8003378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337c:	4770      	bx	lr

0800337e <__sfputs_r>:
 800337e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003380:	4606      	mov	r6, r0
 8003382:	460f      	mov	r7, r1
 8003384:	4614      	mov	r4, r2
 8003386:	18d5      	adds	r5, r2, r3
 8003388:	42ac      	cmp	r4, r5
 800338a:	d101      	bne.n	8003390 <__sfputs_r+0x12>
 800338c:	2000      	movs	r0, #0
 800338e:	e007      	b.n	80033a0 <__sfputs_r+0x22>
 8003390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003394:	463a      	mov	r2, r7
 8003396:	4630      	mov	r0, r6
 8003398:	f7ff ffda 	bl	8003350 <__sfputc_r>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	d1f3      	bne.n	8003388 <__sfputs_r+0xa>
 80033a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033a4 <_vfiprintf_r>:
 80033a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a8:	460d      	mov	r5, r1
 80033aa:	b09d      	sub	sp, #116	@ 0x74
 80033ac:	4614      	mov	r4, r2
 80033ae:	4698      	mov	r8, r3
 80033b0:	4606      	mov	r6, r0
 80033b2:	b118      	cbz	r0, 80033bc <_vfiprintf_r+0x18>
 80033b4:	6a03      	ldr	r3, [r0, #32]
 80033b6:	b90b      	cbnz	r3, 80033bc <_vfiprintf_r+0x18>
 80033b8:	f7ff fcda 	bl	8002d70 <__sinit>
 80033bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033be:	07d9      	lsls	r1, r3, #31
 80033c0:	d405      	bmi.n	80033ce <_vfiprintf_r+0x2a>
 80033c2:	89ab      	ldrh	r3, [r5, #12]
 80033c4:	059a      	lsls	r2, r3, #22
 80033c6:	d402      	bmi.n	80033ce <_vfiprintf_r+0x2a>
 80033c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033ca:	f7ff fec6 	bl	800315a <__retarget_lock_acquire_recursive>
 80033ce:	89ab      	ldrh	r3, [r5, #12]
 80033d0:	071b      	lsls	r3, r3, #28
 80033d2:	d501      	bpl.n	80033d8 <_vfiprintf_r+0x34>
 80033d4:	692b      	ldr	r3, [r5, #16]
 80033d6:	b99b      	cbnz	r3, 8003400 <_vfiprintf_r+0x5c>
 80033d8:	4629      	mov	r1, r5
 80033da:	4630      	mov	r0, r6
 80033dc:	f7ff fdf0 	bl	8002fc0 <__swsetup_r>
 80033e0:	b170      	cbz	r0, 8003400 <_vfiprintf_r+0x5c>
 80033e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033e4:	07dc      	lsls	r4, r3, #31
 80033e6:	d504      	bpl.n	80033f2 <_vfiprintf_r+0x4e>
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	b01d      	add	sp, #116	@ 0x74
 80033ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f2:	89ab      	ldrh	r3, [r5, #12]
 80033f4:	0598      	lsls	r0, r3, #22
 80033f6:	d4f7      	bmi.n	80033e8 <_vfiprintf_r+0x44>
 80033f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033fa:	f7ff feaf 	bl	800315c <__retarget_lock_release_recursive>
 80033fe:	e7f3      	b.n	80033e8 <_vfiprintf_r+0x44>
 8003400:	2300      	movs	r3, #0
 8003402:	9309      	str	r3, [sp, #36]	@ 0x24
 8003404:	2320      	movs	r3, #32
 8003406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800340a:	f8cd 800c 	str.w	r8, [sp, #12]
 800340e:	2330      	movs	r3, #48	@ 0x30
 8003410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80035c0 <_vfiprintf_r+0x21c>
 8003414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003418:	f04f 0901 	mov.w	r9, #1
 800341c:	4623      	mov	r3, r4
 800341e:	469a      	mov	sl, r3
 8003420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003424:	b10a      	cbz	r2, 800342a <_vfiprintf_r+0x86>
 8003426:	2a25      	cmp	r2, #37	@ 0x25
 8003428:	d1f9      	bne.n	800341e <_vfiprintf_r+0x7a>
 800342a:	ebba 0b04 	subs.w	fp, sl, r4
 800342e:	d00b      	beq.n	8003448 <_vfiprintf_r+0xa4>
 8003430:	465b      	mov	r3, fp
 8003432:	4622      	mov	r2, r4
 8003434:	4629      	mov	r1, r5
 8003436:	4630      	mov	r0, r6
 8003438:	f7ff ffa1 	bl	800337e <__sfputs_r>
 800343c:	3001      	adds	r0, #1
 800343e:	f000 80a7 	beq.w	8003590 <_vfiprintf_r+0x1ec>
 8003442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003444:	445a      	add	r2, fp
 8003446:	9209      	str	r2, [sp, #36]	@ 0x24
 8003448:	f89a 3000 	ldrb.w	r3, [sl]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 809f 	beq.w	8003590 <_vfiprintf_r+0x1ec>
 8003452:	2300      	movs	r3, #0
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800345c:	f10a 0a01 	add.w	sl, sl, #1
 8003460:	9304      	str	r3, [sp, #16]
 8003462:	9307      	str	r3, [sp, #28]
 8003464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003468:	931a      	str	r3, [sp, #104]	@ 0x68
 800346a:	4654      	mov	r4, sl
 800346c:	2205      	movs	r2, #5
 800346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003472:	4853      	ldr	r0, [pc, #332]	@ (80035c0 <_vfiprintf_r+0x21c>)
 8003474:	f7fc fe8c 	bl	8000190 <memchr>
 8003478:	9a04      	ldr	r2, [sp, #16]
 800347a:	b9d8      	cbnz	r0, 80034b4 <_vfiprintf_r+0x110>
 800347c:	06d1      	lsls	r1, r2, #27
 800347e:	bf44      	itt	mi
 8003480:	2320      	movmi	r3, #32
 8003482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003486:	0713      	lsls	r3, r2, #28
 8003488:	bf44      	itt	mi
 800348a:	232b      	movmi	r3, #43	@ 0x2b
 800348c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003490:	f89a 3000 	ldrb.w	r3, [sl]
 8003494:	2b2a      	cmp	r3, #42	@ 0x2a
 8003496:	d015      	beq.n	80034c4 <_vfiprintf_r+0x120>
 8003498:	9a07      	ldr	r2, [sp, #28]
 800349a:	4654      	mov	r4, sl
 800349c:	2000      	movs	r0, #0
 800349e:	f04f 0c0a 	mov.w	ip, #10
 80034a2:	4621      	mov	r1, r4
 80034a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034a8:	3b30      	subs	r3, #48	@ 0x30
 80034aa:	2b09      	cmp	r3, #9
 80034ac:	d94b      	bls.n	8003546 <_vfiprintf_r+0x1a2>
 80034ae:	b1b0      	cbz	r0, 80034de <_vfiprintf_r+0x13a>
 80034b0:	9207      	str	r2, [sp, #28]
 80034b2:	e014      	b.n	80034de <_vfiprintf_r+0x13a>
 80034b4:	eba0 0308 	sub.w	r3, r0, r8
 80034b8:	fa09 f303 	lsl.w	r3, r9, r3
 80034bc:	4313      	orrs	r3, r2
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	46a2      	mov	sl, r4
 80034c2:	e7d2      	b.n	800346a <_vfiprintf_r+0xc6>
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	1d19      	adds	r1, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	9103      	str	r1, [sp, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bfbb      	ittet	lt
 80034d0:	425b      	neglt	r3, r3
 80034d2:	f042 0202 	orrlt.w	r2, r2, #2
 80034d6:	9307      	strge	r3, [sp, #28]
 80034d8:	9307      	strlt	r3, [sp, #28]
 80034da:	bfb8      	it	lt
 80034dc:	9204      	strlt	r2, [sp, #16]
 80034de:	7823      	ldrb	r3, [r4, #0]
 80034e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80034e2:	d10a      	bne.n	80034fa <_vfiprintf_r+0x156>
 80034e4:	7863      	ldrb	r3, [r4, #1]
 80034e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80034e8:	d132      	bne.n	8003550 <_vfiprintf_r+0x1ac>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	1d1a      	adds	r2, r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	9203      	str	r2, [sp, #12]
 80034f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034f6:	3402      	adds	r4, #2
 80034f8:	9305      	str	r3, [sp, #20]
 80034fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80035d0 <_vfiprintf_r+0x22c>
 80034fe:	7821      	ldrb	r1, [r4, #0]
 8003500:	2203      	movs	r2, #3
 8003502:	4650      	mov	r0, sl
 8003504:	f7fc fe44 	bl	8000190 <memchr>
 8003508:	b138      	cbz	r0, 800351a <_vfiprintf_r+0x176>
 800350a:	9b04      	ldr	r3, [sp, #16]
 800350c:	eba0 000a 	sub.w	r0, r0, sl
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	4082      	lsls	r2, r0
 8003514:	4313      	orrs	r3, r2
 8003516:	3401      	adds	r4, #1
 8003518:	9304      	str	r3, [sp, #16]
 800351a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351e:	4829      	ldr	r0, [pc, #164]	@ (80035c4 <_vfiprintf_r+0x220>)
 8003520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003524:	2206      	movs	r2, #6
 8003526:	f7fc fe33 	bl	8000190 <memchr>
 800352a:	2800      	cmp	r0, #0
 800352c:	d03f      	beq.n	80035ae <_vfiprintf_r+0x20a>
 800352e:	4b26      	ldr	r3, [pc, #152]	@ (80035c8 <_vfiprintf_r+0x224>)
 8003530:	bb1b      	cbnz	r3, 800357a <_vfiprintf_r+0x1d6>
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	3307      	adds	r3, #7
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	3308      	adds	r3, #8
 800353c:	9303      	str	r3, [sp, #12]
 800353e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003540:	443b      	add	r3, r7
 8003542:	9309      	str	r3, [sp, #36]	@ 0x24
 8003544:	e76a      	b.n	800341c <_vfiprintf_r+0x78>
 8003546:	fb0c 3202 	mla	r2, ip, r2, r3
 800354a:	460c      	mov	r4, r1
 800354c:	2001      	movs	r0, #1
 800354e:	e7a8      	b.n	80034a2 <_vfiprintf_r+0xfe>
 8003550:	2300      	movs	r3, #0
 8003552:	3401      	adds	r4, #1
 8003554:	9305      	str	r3, [sp, #20]
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 0c0a 	mov.w	ip, #10
 800355c:	4620      	mov	r0, r4
 800355e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003562:	3a30      	subs	r2, #48	@ 0x30
 8003564:	2a09      	cmp	r2, #9
 8003566:	d903      	bls.n	8003570 <_vfiprintf_r+0x1cc>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0c6      	beq.n	80034fa <_vfiprintf_r+0x156>
 800356c:	9105      	str	r1, [sp, #20]
 800356e:	e7c4      	b.n	80034fa <_vfiprintf_r+0x156>
 8003570:	fb0c 2101 	mla	r1, ip, r1, r2
 8003574:	4604      	mov	r4, r0
 8003576:	2301      	movs	r3, #1
 8003578:	e7f0      	b.n	800355c <_vfiprintf_r+0x1b8>
 800357a:	ab03      	add	r3, sp, #12
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	462a      	mov	r2, r5
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <_vfiprintf_r+0x228>)
 8003582:	a904      	add	r1, sp, #16
 8003584:	4630      	mov	r0, r6
 8003586:	f3af 8000 	nop.w
 800358a:	4607      	mov	r7, r0
 800358c:	1c78      	adds	r0, r7, #1
 800358e:	d1d6      	bne.n	800353e <_vfiprintf_r+0x19a>
 8003590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003592:	07d9      	lsls	r1, r3, #31
 8003594:	d405      	bmi.n	80035a2 <_vfiprintf_r+0x1fe>
 8003596:	89ab      	ldrh	r3, [r5, #12]
 8003598:	059a      	lsls	r2, r3, #22
 800359a:	d402      	bmi.n	80035a2 <_vfiprintf_r+0x1fe>
 800359c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800359e:	f7ff fddd 	bl	800315c <__retarget_lock_release_recursive>
 80035a2:	89ab      	ldrh	r3, [r5, #12]
 80035a4:	065b      	lsls	r3, r3, #25
 80035a6:	f53f af1f 	bmi.w	80033e8 <_vfiprintf_r+0x44>
 80035aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035ac:	e71e      	b.n	80033ec <_vfiprintf_r+0x48>
 80035ae:	ab03      	add	r3, sp, #12
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	462a      	mov	r2, r5
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <_vfiprintf_r+0x228>)
 80035b6:	a904      	add	r1, sp, #16
 80035b8:	4630      	mov	r0, r6
 80035ba:	f000 f879 	bl	80036b0 <_printf_i>
 80035be:	e7e4      	b.n	800358a <_vfiprintf_r+0x1e6>
 80035c0:	080040b8 	.word	0x080040b8
 80035c4:	080040c2 	.word	0x080040c2
 80035c8:	00000000 	.word	0x00000000
 80035cc:	0800337f 	.word	0x0800337f
 80035d0:	080040be 	.word	0x080040be

080035d4 <_printf_common>:
 80035d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d8:	4616      	mov	r6, r2
 80035da:	4698      	mov	r8, r3
 80035dc:	688a      	ldr	r2, [r1, #8]
 80035de:	690b      	ldr	r3, [r1, #16]
 80035e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bfb8      	it	lt
 80035e8:	4613      	movlt	r3, r2
 80035ea:	6033      	str	r3, [r6, #0]
 80035ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035f0:	4607      	mov	r7, r0
 80035f2:	460c      	mov	r4, r1
 80035f4:	b10a      	cbz	r2, 80035fa <_printf_common+0x26>
 80035f6:	3301      	adds	r3, #1
 80035f8:	6033      	str	r3, [r6, #0]
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	0699      	lsls	r1, r3, #26
 80035fe:	bf42      	ittt	mi
 8003600:	6833      	ldrmi	r3, [r6, #0]
 8003602:	3302      	addmi	r3, #2
 8003604:	6033      	strmi	r3, [r6, #0]
 8003606:	6825      	ldr	r5, [r4, #0]
 8003608:	f015 0506 	ands.w	r5, r5, #6
 800360c:	d106      	bne.n	800361c <_printf_common+0x48>
 800360e:	f104 0a19 	add.w	sl, r4, #25
 8003612:	68e3      	ldr	r3, [r4, #12]
 8003614:	6832      	ldr	r2, [r6, #0]
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	42ab      	cmp	r3, r5
 800361a:	dc26      	bgt.n	800366a <_printf_common+0x96>
 800361c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003620:	6822      	ldr	r2, [r4, #0]
 8003622:	3b00      	subs	r3, #0
 8003624:	bf18      	it	ne
 8003626:	2301      	movne	r3, #1
 8003628:	0692      	lsls	r2, r2, #26
 800362a:	d42b      	bmi.n	8003684 <_printf_common+0xb0>
 800362c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003630:	4641      	mov	r1, r8
 8003632:	4638      	mov	r0, r7
 8003634:	47c8      	blx	r9
 8003636:	3001      	adds	r0, #1
 8003638:	d01e      	beq.n	8003678 <_printf_common+0xa4>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	6922      	ldr	r2, [r4, #16]
 800363e:	f003 0306 	and.w	r3, r3, #6
 8003642:	2b04      	cmp	r3, #4
 8003644:	bf02      	ittt	eq
 8003646:	68e5      	ldreq	r5, [r4, #12]
 8003648:	6833      	ldreq	r3, [r6, #0]
 800364a:	1aed      	subeq	r5, r5, r3
 800364c:	68a3      	ldr	r3, [r4, #8]
 800364e:	bf0c      	ite	eq
 8003650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003654:	2500      	movne	r5, #0
 8003656:	4293      	cmp	r3, r2
 8003658:	bfc4      	itt	gt
 800365a:	1a9b      	subgt	r3, r3, r2
 800365c:	18ed      	addgt	r5, r5, r3
 800365e:	2600      	movs	r6, #0
 8003660:	341a      	adds	r4, #26
 8003662:	42b5      	cmp	r5, r6
 8003664:	d11a      	bne.n	800369c <_printf_common+0xc8>
 8003666:	2000      	movs	r0, #0
 8003668:	e008      	b.n	800367c <_printf_common+0xa8>
 800366a:	2301      	movs	r3, #1
 800366c:	4652      	mov	r2, sl
 800366e:	4641      	mov	r1, r8
 8003670:	4638      	mov	r0, r7
 8003672:	47c8      	blx	r9
 8003674:	3001      	adds	r0, #1
 8003676:	d103      	bne.n	8003680 <_printf_common+0xac>
 8003678:	f04f 30ff 	mov.w	r0, #4294967295
 800367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003680:	3501      	adds	r5, #1
 8003682:	e7c6      	b.n	8003612 <_printf_common+0x3e>
 8003684:	18e1      	adds	r1, r4, r3
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	2030      	movs	r0, #48	@ 0x30
 800368a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800368e:	4422      	add	r2, r4
 8003690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003698:	3302      	adds	r3, #2
 800369a:	e7c7      	b.n	800362c <_printf_common+0x58>
 800369c:	2301      	movs	r3, #1
 800369e:	4622      	mov	r2, r4
 80036a0:	4641      	mov	r1, r8
 80036a2:	4638      	mov	r0, r7
 80036a4:	47c8      	blx	r9
 80036a6:	3001      	adds	r0, #1
 80036a8:	d0e6      	beq.n	8003678 <_printf_common+0xa4>
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7d9      	b.n	8003662 <_printf_common+0x8e>
	...

080036b0 <_printf_i>:
 80036b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036b4:	7e0f      	ldrb	r7, [r1, #24]
 80036b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036b8:	2f78      	cmp	r7, #120	@ 0x78
 80036ba:	4691      	mov	r9, r2
 80036bc:	4680      	mov	r8, r0
 80036be:	460c      	mov	r4, r1
 80036c0:	469a      	mov	sl, r3
 80036c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036c6:	d807      	bhi.n	80036d8 <_printf_i+0x28>
 80036c8:	2f62      	cmp	r7, #98	@ 0x62
 80036ca:	d80a      	bhi.n	80036e2 <_printf_i+0x32>
 80036cc:	2f00      	cmp	r7, #0
 80036ce:	f000 80d2 	beq.w	8003876 <_printf_i+0x1c6>
 80036d2:	2f58      	cmp	r7, #88	@ 0x58
 80036d4:	f000 80b7 	beq.w	8003846 <_printf_i+0x196>
 80036d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036e0:	e03a      	b.n	8003758 <_printf_i+0xa8>
 80036e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036e6:	2b15      	cmp	r3, #21
 80036e8:	d8f6      	bhi.n	80036d8 <_printf_i+0x28>
 80036ea:	a101      	add	r1, pc, #4	@ (adr r1, 80036f0 <_printf_i+0x40>)
 80036ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036f0:	08003749 	.word	0x08003749
 80036f4:	0800375d 	.word	0x0800375d
 80036f8:	080036d9 	.word	0x080036d9
 80036fc:	080036d9 	.word	0x080036d9
 8003700:	080036d9 	.word	0x080036d9
 8003704:	080036d9 	.word	0x080036d9
 8003708:	0800375d 	.word	0x0800375d
 800370c:	080036d9 	.word	0x080036d9
 8003710:	080036d9 	.word	0x080036d9
 8003714:	080036d9 	.word	0x080036d9
 8003718:	080036d9 	.word	0x080036d9
 800371c:	0800385d 	.word	0x0800385d
 8003720:	08003787 	.word	0x08003787
 8003724:	08003813 	.word	0x08003813
 8003728:	080036d9 	.word	0x080036d9
 800372c:	080036d9 	.word	0x080036d9
 8003730:	0800387f 	.word	0x0800387f
 8003734:	080036d9 	.word	0x080036d9
 8003738:	08003787 	.word	0x08003787
 800373c:	080036d9 	.word	0x080036d9
 8003740:	080036d9 	.word	0x080036d9
 8003744:	0800381b 	.word	0x0800381b
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	1d1a      	adds	r2, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6032      	str	r2, [r6, #0]
 8003750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003758:	2301      	movs	r3, #1
 800375a:	e09d      	b.n	8003898 <_printf_i+0x1e8>
 800375c:	6833      	ldr	r3, [r6, #0]
 800375e:	6820      	ldr	r0, [r4, #0]
 8003760:	1d19      	adds	r1, r3, #4
 8003762:	6031      	str	r1, [r6, #0]
 8003764:	0606      	lsls	r6, r0, #24
 8003766:	d501      	bpl.n	800376c <_printf_i+0xbc>
 8003768:	681d      	ldr	r5, [r3, #0]
 800376a:	e003      	b.n	8003774 <_printf_i+0xc4>
 800376c:	0645      	lsls	r5, r0, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0xb8>
 8003770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003774:	2d00      	cmp	r5, #0
 8003776:	da03      	bge.n	8003780 <_printf_i+0xd0>
 8003778:	232d      	movs	r3, #45	@ 0x2d
 800377a:	426d      	negs	r5, r5
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003780:	4859      	ldr	r0, [pc, #356]	@ (80038e8 <_printf_i+0x238>)
 8003782:	230a      	movs	r3, #10
 8003784:	e010      	b.n	80037a8 <_printf_i+0xf8>
 8003786:	6821      	ldr	r1, [r4, #0]
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	0608      	lsls	r0, r1, #24
 800378c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003790:	d402      	bmi.n	8003798 <_printf_i+0xe8>
 8003792:	0649      	lsls	r1, r1, #25
 8003794:	bf48      	it	mi
 8003796:	b2ad      	uxthmi	r5, r5
 8003798:	2f6f      	cmp	r7, #111	@ 0x6f
 800379a:	4853      	ldr	r0, [pc, #332]	@ (80038e8 <_printf_i+0x238>)
 800379c:	6033      	str	r3, [r6, #0]
 800379e:	d159      	bne.n	8003854 <_printf_i+0x1a4>
 80037a0:	2308      	movs	r3, #8
 80037a2:	2100      	movs	r1, #0
 80037a4:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037a8:	6866      	ldr	r6, [r4, #4]
 80037aa:	60a6      	str	r6, [r4, #8]
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	db05      	blt.n	80037bc <_printf_i+0x10c>
 80037b0:	6821      	ldr	r1, [r4, #0]
 80037b2:	432e      	orrs	r6, r5
 80037b4:	f021 0104 	bic.w	r1, r1, #4
 80037b8:	6021      	str	r1, [r4, #0]
 80037ba:	d04d      	beq.n	8003858 <_printf_i+0x1a8>
 80037bc:	4616      	mov	r6, r2
 80037be:	fbb5 f1f3 	udiv	r1, r5, r3
 80037c2:	fb03 5711 	mls	r7, r3, r1, r5
 80037c6:	5dc7      	ldrb	r7, [r0, r7]
 80037c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037cc:	462f      	mov	r7, r5
 80037ce:	42bb      	cmp	r3, r7
 80037d0:	460d      	mov	r5, r1
 80037d2:	d9f4      	bls.n	80037be <_printf_i+0x10e>
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d10b      	bne.n	80037f0 <_printf_i+0x140>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	07df      	lsls	r7, r3, #31
 80037dc:	d508      	bpl.n	80037f0 <_printf_i+0x140>
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	6861      	ldr	r1, [r4, #4]
 80037e2:	4299      	cmp	r1, r3
 80037e4:	bfde      	ittt	le
 80037e6:	2330      	movle	r3, #48	@ 0x30
 80037e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037f0:	1b92      	subs	r2, r2, r6
 80037f2:	6122      	str	r2, [r4, #16]
 80037f4:	f8cd a000 	str.w	sl, [sp]
 80037f8:	464b      	mov	r3, r9
 80037fa:	aa03      	add	r2, sp, #12
 80037fc:	4621      	mov	r1, r4
 80037fe:	4640      	mov	r0, r8
 8003800:	f7ff fee8 	bl	80035d4 <_printf_common>
 8003804:	3001      	adds	r0, #1
 8003806:	d14c      	bne.n	80038a2 <_printf_i+0x1f2>
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	b004      	add	sp, #16
 800380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	f043 0320 	orr.w	r3, r3, #32
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	4834      	ldr	r0, [pc, #208]	@ (80038ec <_printf_i+0x23c>)
 800381c:	2778      	movs	r7, #120	@ 0x78
 800381e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	6831      	ldr	r1, [r6, #0]
 8003826:	061f      	lsls	r7, r3, #24
 8003828:	f851 5b04 	ldr.w	r5, [r1], #4
 800382c:	d402      	bmi.n	8003834 <_printf_i+0x184>
 800382e:	065f      	lsls	r7, r3, #25
 8003830:	bf48      	it	mi
 8003832:	b2ad      	uxthmi	r5, r5
 8003834:	6031      	str	r1, [r6, #0]
 8003836:	07d9      	lsls	r1, r3, #31
 8003838:	bf44      	itt	mi
 800383a:	f043 0320 	orrmi.w	r3, r3, #32
 800383e:	6023      	strmi	r3, [r4, #0]
 8003840:	b11d      	cbz	r5, 800384a <_printf_i+0x19a>
 8003842:	2310      	movs	r3, #16
 8003844:	e7ad      	b.n	80037a2 <_printf_i+0xf2>
 8003846:	4828      	ldr	r0, [pc, #160]	@ (80038e8 <_printf_i+0x238>)
 8003848:	e7e9      	b.n	800381e <_printf_i+0x16e>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	f023 0320 	bic.w	r3, r3, #32
 8003850:	6023      	str	r3, [r4, #0]
 8003852:	e7f6      	b.n	8003842 <_printf_i+0x192>
 8003854:	230a      	movs	r3, #10
 8003856:	e7a4      	b.n	80037a2 <_printf_i+0xf2>
 8003858:	4616      	mov	r6, r2
 800385a:	e7bb      	b.n	80037d4 <_printf_i+0x124>
 800385c:	6833      	ldr	r3, [r6, #0]
 800385e:	6825      	ldr	r5, [r4, #0]
 8003860:	6961      	ldr	r1, [r4, #20]
 8003862:	1d18      	adds	r0, r3, #4
 8003864:	6030      	str	r0, [r6, #0]
 8003866:	062e      	lsls	r6, r5, #24
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	d501      	bpl.n	8003870 <_printf_i+0x1c0>
 800386c:	6019      	str	r1, [r3, #0]
 800386e:	e002      	b.n	8003876 <_printf_i+0x1c6>
 8003870:	0668      	lsls	r0, r5, #25
 8003872:	d5fb      	bpl.n	800386c <_printf_i+0x1bc>
 8003874:	8019      	strh	r1, [r3, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	4616      	mov	r6, r2
 800387c:	e7ba      	b.n	80037f4 <_printf_i+0x144>
 800387e:	6833      	ldr	r3, [r6, #0]
 8003880:	1d1a      	adds	r2, r3, #4
 8003882:	6032      	str	r2, [r6, #0]
 8003884:	681e      	ldr	r6, [r3, #0]
 8003886:	6862      	ldr	r2, [r4, #4]
 8003888:	2100      	movs	r1, #0
 800388a:	4630      	mov	r0, r6
 800388c:	f7fc fc80 	bl	8000190 <memchr>
 8003890:	b108      	cbz	r0, 8003896 <_printf_i+0x1e6>
 8003892:	1b80      	subs	r0, r0, r6
 8003894:	6060      	str	r0, [r4, #4]
 8003896:	6863      	ldr	r3, [r4, #4]
 8003898:	6123      	str	r3, [r4, #16]
 800389a:	2300      	movs	r3, #0
 800389c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038a0:	e7a8      	b.n	80037f4 <_printf_i+0x144>
 80038a2:	6923      	ldr	r3, [r4, #16]
 80038a4:	4632      	mov	r2, r6
 80038a6:	4649      	mov	r1, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	47d0      	blx	sl
 80038ac:	3001      	adds	r0, #1
 80038ae:	d0ab      	beq.n	8003808 <_printf_i+0x158>
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	079b      	lsls	r3, r3, #30
 80038b4:	d413      	bmi.n	80038de <_printf_i+0x22e>
 80038b6:	68e0      	ldr	r0, [r4, #12]
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	4298      	cmp	r0, r3
 80038bc:	bfb8      	it	lt
 80038be:	4618      	movlt	r0, r3
 80038c0:	e7a4      	b.n	800380c <_printf_i+0x15c>
 80038c2:	2301      	movs	r3, #1
 80038c4:	4632      	mov	r2, r6
 80038c6:	4649      	mov	r1, r9
 80038c8:	4640      	mov	r0, r8
 80038ca:	47d0      	blx	sl
 80038cc:	3001      	adds	r0, #1
 80038ce:	d09b      	beq.n	8003808 <_printf_i+0x158>
 80038d0:	3501      	adds	r5, #1
 80038d2:	68e3      	ldr	r3, [r4, #12]
 80038d4:	9903      	ldr	r1, [sp, #12]
 80038d6:	1a5b      	subs	r3, r3, r1
 80038d8:	42ab      	cmp	r3, r5
 80038da:	dcf2      	bgt.n	80038c2 <_printf_i+0x212>
 80038dc:	e7eb      	b.n	80038b6 <_printf_i+0x206>
 80038de:	2500      	movs	r5, #0
 80038e0:	f104 0619 	add.w	r6, r4, #25
 80038e4:	e7f5      	b.n	80038d2 <_printf_i+0x222>
 80038e6:	bf00      	nop
 80038e8:	080040c9 	.word	0x080040c9
 80038ec:	080040da 	.word	0x080040da

080038f0 <__sflush_r>:
 80038f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f8:	0716      	lsls	r6, r2, #28
 80038fa:	4605      	mov	r5, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	d451      	bmi.n	80039a4 <__sflush_r+0xb4>
 8003900:	684b      	ldr	r3, [r1, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	dc02      	bgt.n	800390c <__sflush_r+0x1c>
 8003906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	dd49      	ble.n	80039a0 <__sflush_r+0xb0>
 800390c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800390e:	2e00      	cmp	r6, #0
 8003910:	d046      	beq.n	80039a0 <__sflush_r+0xb0>
 8003912:	2300      	movs	r3, #0
 8003914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003918:	682f      	ldr	r7, [r5, #0]
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	d031      	beq.n	8003982 <__sflush_r+0x92>
 800391e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	0759      	lsls	r1, r3, #29
 8003924:	d505      	bpl.n	8003932 <__sflush_r+0x42>
 8003926:	6863      	ldr	r3, [r4, #4]
 8003928:	1ad2      	subs	r2, r2, r3
 800392a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800392c:	b10b      	cbz	r3, 8003932 <__sflush_r+0x42>
 800392e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003930:	1ad2      	subs	r2, r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003936:	6a21      	ldr	r1, [r4, #32]
 8003938:	4628      	mov	r0, r5
 800393a:	47b0      	blx	r6
 800393c:	1c42      	adds	r2, r0, #1
 800393e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003942:	d106      	bne.n	8003952 <__sflush_r+0x62>
 8003944:	6829      	ldr	r1, [r5, #0]
 8003946:	291d      	cmp	r1, #29
 8003948:	d846      	bhi.n	80039d8 <__sflush_r+0xe8>
 800394a:	4a29      	ldr	r2, [pc, #164]	@ (80039f0 <__sflush_r+0x100>)
 800394c:	40ca      	lsrs	r2, r1
 800394e:	07d6      	lsls	r6, r2, #31
 8003950:	d542      	bpl.n	80039d8 <__sflush_r+0xe8>
 8003952:	2200      	movs	r2, #0
 8003954:	6062      	str	r2, [r4, #4]
 8003956:	04d9      	lsls	r1, r3, #19
 8003958:	6922      	ldr	r2, [r4, #16]
 800395a:	6022      	str	r2, [r4, #0]
 800395c:	d504      	bpl.n	8003968 <__sflush_r+0x78>
 800395e:	1c42      	adds	r2, r0, #1
 8003960:	d101      	bne.n	8003966 <__sflush_r+0x76>
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	b903      	cbnz	r3, 8003968 <__sflush_r+0x78>
 8003966:	6560      	str	r0, [r4, #84]	@ 0x54
 8003968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800396a:	602f      	str	r7, [r5, #0]
 800396c:	b1c1      	cbz	r1, 80039a0 <__sflush_r+0xb0>
 800396e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003972:	4299      	cmp	r1, r3
 8003974:	d002      	beq.n	800397c <__sflush_r+0x8c>
 8003976:	4628      	mov	r0, r5
 8003978:	f7ff fbf2 	bl	8003160 <_free_r>
 800397c:	2300      	movs	r3, #0
 800397e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003980:	e00e      	b.n	80039a0 <__sflush_r+0xb0>
 8003982:	6a21      	ldr	r1, [r4, #32]
 8003984:	2301      	movs	r3, #1
 8003986:	4628      	mov	r0, r5
 8003988:	47b0      	blx	r6
 800398a:	4602      	mov	r2, r0
 800398c:	1c50      	adds	r0, r2, #1
 800398e:	d1c7      	bne.n	8003920 <__sflush_r+0x30>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0c4      	beq.n	8003920 <__sflush_r+0x30>
 8003996:	2b1d      	cmp	r3, #29
 8003998:	d001      	beq.n	800399e <__sflush_r+0xae>
 800399a:	2b16      	cmp	r3, #22
 800399c:	d11a      	bne.n	80039d4 <__sflush_r+0xe4>
 800399e:	602f      	str	r7, [r5, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e01e      	b.n	80039e2 <__sflush_r+0xf2>
 80039a4:	690f      	ldr	r7, [r1, #16]
 80039a6:	2f00      	cmp	r7, #0
 80039a8:	d0fa      	beq.n	80039a0 <__sflush_r+0xb0>
 80039aa:	0793      	lsls	r3, r2, #30
 80039ac:	680e      	ldr	r6, [r1, #0]
 80039ae:	bf08      	it	eq
 80039b0:	694b      	ldreq	r3, [r1, #20]
 80039b2:	600f      	str	r7, [r1, #0]
 80039b4:	bf18      	it	ne
 80039b6:	2300      	movne	r3, #0
 80039b8:	eba6 0807 	sub.w	r8, r6, r7
 80039bc:	608b      	str	r3, [r1, #8]
 80039be:	f1b8 0f00 	cmp.w	r8, #0
 80039c2:	dded      	ble.n	80039a0 <__sflush_r+0xb0>
 80039c4:	6a21      	ldr	r1, [r4, #32]
 80039c6:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039c8:	4643      	mov	r3, r8
 80039ca:	463a      	mov	r2, r7
 80039cc:	4628      	mov	r0, r5
 80039ce:	47b0      	blx	r6
 80039d0:	2800      	cmp	r0, #0
 80039d2:	dc08      	bgt.n	80039e6 <__sflush_r+0xf6>
 80039d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039dc:	81a3      	strh	r3, [r4, #12]
 80039de:	f04f 30ff 	mov.w	r0, #4294967295
 80039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e6:	4407      	add	r7, r0
 80039e8:	eba8 0800 	sub.w	r8, r8, r0
 80039ec:	e7e7      	b.n	80039be <__sflush_r+0xce>
 80039ee:	bf00      	nop
 80039f0:	20400001 	.word	0x20400001

080039f4 <_fflush_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	4605      	mov	r5, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	b913      	cbnz	r3, 8003a04 <_fflush_r+0x10>
 80039fe:	2500      	movs	r5, #0
 8003a00:	4628      	mov	r0, r5
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	b118      	cbz	r0, 8003a0e <_fflush_r+0x1a>
 8003a06:	6a03      	ldr	r3, [r0, #32]
 8003a08:	b90b      	cbnz	r3, 8003a0e <_fflush_r+0x1a>
 8003a0a:	f7ff f9b1 	bl	8002d70 <__sinit>
 8003a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f3      	beq.n	80039fe <_fflush_r+0xa>
 8003a16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a18:	07d0      	lsls	r0, r2, #31
 8003a1a:	d404      	bmi.n	8003a26 <_fflush_r+0x32>
 8003a1c:	0599      	lsls	r1, r3, #22
 8003a1e:	d402      	bmi.n	8003a26 <_fflush_r+0x32>
 8003a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a22:	f7ff fb9a 	bl	800315a <__retarget_lock_acquire_recursive>
 8003a26:	4628      	mov	r0, r5
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7ff ff61 	bl	80038f0 <__sflush_r>
 8003a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a30:	07da      	lsls	r2, r3, #31
 8003a32:	4605      	mov	r5, r0
 8003a34:	d4e4      	bmi.n	8003a00 <_fflush_r+0xc>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	059b      	lsls	r3, r3, #22
 8003a3a:	d4e1      	bmi.n	8003a00 <_fflush_r+0xc>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a3e:	f7ff fb8d 	bl	800315c <__retarget_lock_release_recursive>
 8003a42:	e7dd      	b.n	8003a00 <_fflush_r+0xc>

08003a44 <__swhatbuf_r>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	460c      	mov	r4, r1
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	b096      	sub	sp, #88	@ 0x58
 8003a50:	4615      	mov	r5, r2
 8003a52:	461e      	mov	r6, r3
 8003a54:	da0a      	bge.n	8003a6c <__swhatbuf_r+0x28>
 8003a56:	89a1      	ldrh	r1, [r4, #12]
 8003a58:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8003a5c:	d113      	bne.n	8003a86 <__swhatbuf_r+0x42>
 8003a5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a62:	2000      	movs	r0, #0
 8003a64:	6031      	str	r1, [r6, #0]
 8003a66:	602a      	str	r2, [r5, #0]
 8003a68:	b016      	add	sp, #88	@ 0x58
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	466a      	mov	r2, sp
 8003a6e:	f000 f847 	bl	8003b00 <_fstat_r>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	dbef      	blt.n	8003a56 <__swhatbuf_r+0x12>
 8003a76:	9901      	ldr	r1, [sp, #4]
 8003a78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a80:	4259      	negs	r1, r3
 8003a82:	4159      	adcs	r1, r3
 8003a84:	e7eb      	b.n	8003a5e <__swhatbuf_r+0x1a>
 8003a86:	2100      	movs	r1, #0
 8003a88:	2240      	movs	r2, #64	@ 0x40
 8003a8a:	e7ea      	b.n	8003a62 <__swhatbuf_r+0x1e>

08003a8c <__smakebuf_r>:
 8003a8c:	898b      	ldrh	r3, [r1, #12]
 8003a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a90:	079e      	lsls	r6, r3, #30
 8003a92:	4605      	mov	r5, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	d507      	bpl.n	8003aa8 <__smakebuf_r+0x1c>
 8003a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	6123      	str	r3, [r4, #16]
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	6163      	str	r3, [r4, #20]
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	ab01      	add	r3, sp, #4
 8003aaa:	466a      	mov	r2, sp
 8003aac:	f7ff ffca 	bl	8003a44 <__swhatbuf_r>
 8003ab0:	9e00      	ldr	r6, [sp, #0]
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	f7ff fbbf 	bl	8003238 <_malloc_r>
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	b938      	cbnz	r0, 8003ad0 <__smakebuf_r+0x44>
 8003ac0:	059a      	lsls	r2, r3, #22
 8003ac2:	d4ef      	bmi.n	8003aa4 <__smakebuf_r+0x18>
 8003ac4:	f023 0303 	bic.w	r3, r3, #3
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	e7e3      	b.n	8003a98 <__smakebuf_r+0xc>
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad4:	81a3      	strh	r3, [r4, #12]
 8003ad6:	9b01      	ldr	r3, [sp, #4]
 8003ad8:	6020      	str	r0, [r4, #0]
 8003ada:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0e0      	beq.n	8003aa4 <__smakebuf_r+0x18>
 8003ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 f81c 	bl	8003b24 <_isatty_r>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d0d9      	beq.n	8003aa4 <__smakebuf_r+0x18>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	e7d2      	b.n	8003aa4 <__smakebuf_r+0x18>
	...

08003b00 <_fstat_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	@ (8003b20 <_fstat_r+0x20>)
 8003b04:	2300      	movs	r3, #0
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	f7fe ffee 	bl	8002aee <_fstat>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d102      	bne.n	8003b1c <_fstat_r+0x1c>
 8003b16:	682b      	ldr	r3, [r5, #0]
 8003b18:	b103      	cbz	r3, 8003b1c <_fstat_r+0x1c>
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000270 	.word	0x20000270

08003b24 <_isatty_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4d06      	ldr	r5, [pc, #24]	@ (8003b40 <_isatty_r+0x1c>)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	f7fe ffe2 	bl	8002af8 <_isatty>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_isatty_r+0x1a>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_isatty_r+0x1a>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	20000270 	.word	0x20000270

08003b44 <_sbrk_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d06      	ldr	r5, [pc, #24]	@ (8003b60 <_sbrk_r+0x1c>)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	f7fe ffd6 	bl	8002b00 <_sbrk>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_sbrk_r+0x1a>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_sbrk_r+0x1a>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	20000270 	.word	0x20000270

08003b64 <__udivmoddi4>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	9d08      	ldr	r5, [sp, #32]
 8003b6a:	460f      	mov	r7, r1
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	468c      	mov	ip, r1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d148      	bne.n	8003c06 <__udivmoddi4+0xa2>
 8003b74:	428a      	cmp	r2, r1
 8003b76:	4616      	mov	r6, r2
 8003b78:	d961      	bls.n	8003c3e <__udivmoddi4+0xda>
 8003b7a:	fab2 f382 	clz	r3, r2
 8003b7e:	b14b      	cbz	r3, 8003b94 <__udivmoddi4+0x30>
 8003b80:	f1c3 0220 	rsb	r2, r3, #32
 8003b84:	fa01 fc03 	lsl.w	ip, r1, r3
 8003b88:	fa20 f202 	lsr.w	r2, r0, r2
 8003b8c:	409e      	lsls	r6, r3
 8003b8e:	ea42 0c0c 	orr.w	ip, r2, ip
 8003b92:	409c      	lsls	r4, r3
 8003b94:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8003b98:	b2b7      	uxth	r7, r6
 8003b9a:	fbbc f1fe 	udiv	r1, ip, lr
 8003b9e:	0c22      	lsrs	r2, r4, #16
 8003ba0:	fb0e cc11 	mls	ip, lr, r1, ip
 8003ba4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8003ba8:	fb01 f007 	mul.w	r0, r1, r7
 8003bac:	4290      	cmp	r0, r2
 8003bae:	d909      	bls.n	8003bc4 <__udivmoddi4+0x60>
 8003bb0:	18b2      	adds	r2, r6, r2
 8003bb2:	f101 3cff 	add.w	ip, r1, #4294967295
 8003bb6:	f080 80ee 	bcs.w	8003d96 <__udivmoddi4+0x232>
 8003bba:	4290      	cmp	r0, r2
 8003bbc:	f240 80eb 	bls.w	8003d96 <__udivmoddi4+0x232>
 8003bc0:	3902      	subs	r1, #2
 8003bc2:	4432      	add	r2, r6
 8003bc4:	1a12      	subs	r2, r2, r0
 8003bc6:	b2a4      	uxth	r4, r4
 8003bc8:	fbb2 f0fe 	udiv	r0, r2, lr
 8003bcc:	fb0e 2210 	mls	r2, lr, r0, r2
 8003bd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003bd4:	fb00 f707 	mul.w	r7, r0, r7
 8003bd8:	42a7      	cmp	r7, r4
 8003bda:	d909      	bls.n	8003bf0 <__udivmoddi4+0x8c>
 8003bdc:	1934      	adds	r4, r6, r4
 8003bde:	f100 32ff 	add.w	r2, r0, #4294967295
 8003be2:	f080 80da 	bcs.w	8003d9a <__udivmoddi4+0x236>
 8003be6:	42a7      	cmp	r7, r4
 8003be8:	f240 80d7 	bls.w	8003d9a <__udivmoddi4+0x236>
 8003bec:	4434      	add	r4, r6
 8003bee:	3802      	subs	r0, #2
 8003bf0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003bf4:	1be4      	subs	r4, r4, r7
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	b11d      	cbz	r5, 8003c02 <__udivmoddi4+0x9e>
 8003bfa:	40dc      	lsrs	r4, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e9c5 4300 	strd	r4, r3, [r5]
 8003c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c06:	428b      	cmp	r3, r1
 8003c08:	d906      	bls.n	8003c18 <__udivmoddi4+0xb4>
 8003c0a:	b10d      	cbz	r5, 8003c10 <__udivmoddi4+0xac>
 8003c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4608      	mov	r0, r1
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	fab3 f183 	clz	r1, r3
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	d148      	bne.n	8003cb2 <__udivmoddi4+0x14e>
 8003c20:	42bb      	cmp	r3, r7
 8003c22:	d302      	bcc.n	8003c2a <__udivmoddi4+0xc6>
 8003c24:	4282      	cmp	r2, r0
 8003c26:	f200 8107 	bhi.w	8003e38 <__udivmoddi4+0x2d4>
 8003c2a:	1a84      	subs	r4, r0, r2
 8003c2c:	eb67 0203 	sbc.w	r2, r7, r3
 8003c30:	2001      	movs	r0, #1
 8003c32:	4694      	mov	ip, r2
 8003c34:	2d00      	cmp	r5, #0
 8003c36:	d0e4      	beq.n	8003c02 <__udivmoddi4+0x9e>
 8003c38:	e9c5 4c00 	strd	r4, ip, [r5]
 8003c3c:	e7e1      	b.n	8003c02 <__udivmoddi4+0x9e>
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	f000 8092 	beq.w	8003d68 <__udivmoddi4+0x204>
 8003c44:	fab2 f382 	clz	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 80a8 	bne.w	8003d9e <__udivmoddi4+0x23a>
 8003c4e:	1a8a      	subs	r2, r1, r2
 8003c50:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8003c54:	fa1f fc86 	uxth.w	ip, r6
 8003c58:	2101      	movs	r1, #1
 8003c5a:	0c20      	lsrs	r0, r4, #16
 8003c5c:	fbb2 f7fe 	udiv	r7, r2, lr
 8003c60:	fb0e 2217 	mls	r2, lr, r7, r2
 8003c64:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8003c68:	fb0c f007 	mul.w	r0, ip, r7
 8003c6c:	4290      	cmp	r0, r2
 8003c6e:	d907      	bls.n	8003c80 <__udivmoddi4+0x11c>
 8003c70:	18b2      	adds	r2, r6, r2
 8003c72:	f107 38ff 	add.w	r8, r7, #4294967295
 8003c76:	d202      	bcs.n	8003c7e <__udivmoddi4+0x11a>
 8003c78:	4290      	cmp	r0, r2
 8003c7a:	f200 80e2 	bhi.w	8003e42 <__udivmoddi4+0x2de>
 8003c7e:	4647      	mov	r7, r8
 8003c80:	1a12      	subs	r2, r2, r0
 8003c82:	b2a4      	uxth	r4, r4
 8003c84:	fbb2 f0fe 	udiv	r0, r2, lr
 8003c88:	fb0e 2210 	mls	r2, lr, r0, r2
 8003c8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003c90:	fb0c fc00 	mul.w	ip, ip, r0
 8003c94:	45a4      	cmp	ip, r4
 8003c96:	d907      	bls.n	8003ca8 <__udivmoddi4+0x144>
 8003c98:	1934      	adds	r4, r6, r4
 8003c9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8003c9e:	d202      	bcs.n	8003ca6 <__udivmoddi4+0x142>
 8003ca0:	45a4      	cmp	ip, r4
 8003ca2:	f200 80cb 	bhi.w	8003e3c <__udivmoddi4+0x2d8>
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	eba4 040c 	sub.w	r4, r4, ip
 8003cac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003cb0:	e7a2      	b.n	8003bf8 <__udivmoddi4+0x94>
 8003cb2:	f1c1 0620 	rsb	r6, r1, #32
 8003cb6:	408b      	lsls	r3, r1
 8003cb8:	fa22 fc06 	lsr.w	ip, r2, r6
 8003cbc:	ea4c 0c03 	orr.w	ip, ip, r3
 8003cc0:	fa07 f401 	lsl.w	r4, r7, r1
 8003cc4:	fa20 f306 	lsr.w	r3, r0, r6
 8003cc8:	40f7      	lsrs	r7, r6
 8003cca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003cce:	4323      	orrs	r3, r4
 8003cd0:	fa00 f801 	lsl.w	r8, r0, r1
 8003cd4:	fa1f fe8c 	uxth.w	lr, ip
 8003cd8:	fbb7 f0f9 	udiv	r0, r7, r9
 8003cdc:	0c1c      	lsrs	r4, r3, #16
 8003cde:	fb09 7710 	mls	r7, r9, r0, r7
 8003ce2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8003ce6:	fb00 f70e 	mul.w	r7, r0, lr
 8003cea:	42a7      	cmp	r7, r4
 8003cec:	fa02 f201 	lsl.w	r2, r2, r1
 8003cf0:	d90a      	bls.n	8003d08 <__udivmoddi4+0x1a4>
 8003cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8003cf6:	f100 3aff 	add.w	sl, r0, #4294967295
 8003cfa:	f080 809b 	bcs.w	8003e34 <__udivmoddi4+0x2d0>
 8003cfe:	42a7      	cmp	r7, r4
 8003d00:	f240 8098 	bls.w	8003e34 <__udivmoddi4+0x2d0>
 8003d04:	3802      	subs	r0, #2
 8003d06:	4464      	add	r4, ip
 8003d08:	1be4      	subs	r4, r4, r7
 8003d0a:	b29f      	uxth	r7, r3
 8003d0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8003d10:	fb09 4413 	mls	r4, r9, r3, r4
 8003d14:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8003d18:	fb03 fe0e 	mul.w	lr, r3, lr
 8003d1c:	45a6      	cmp	lr, r4
 8003d1e:	d909      	bls.n	8003d34 <__udivmoddi4+0x1d0>
 8003d20:	eb1c 0404 	adds.w	r4, ip, r4
 8003d24:	f103 37ff 	add.w	r7, r3, #4294967295
 8003d28:	f080 8082 	bcs.w	8003e30 <__udivmoddi4+0x2cc>
 8003d2c:	45a6      	cmp	lr, r4
 8003d2e:	d97f      	bls.n	8003e30 <__udivmoddi4+0x2cc>
 8003d30:	3b02      	subs	r3, #2
 8003d32:	4464      	add	r4, ip
 8003d34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8003d38:	eba4 040e 	sub.w	r4, r4, lr
 8003d3c:	fba0 e702 	umull	lr, r7, r0, r2
 8003d40:	42bc      	cmp	r4, r7
 8003d42:	4673      	mov	r3, lr
 8003d44:	46b9      	mov	r9, r7
 8003d46:	d363      	bcc.n	8003e10 <__udivmoddi4+0x2ac>
 8003d48:	d060      	beq.n	8003e0c <__udivmoddi4+0x2a8>
 8003d4a:	b15d      	cbz	r5, 8003d64 <__udivmoddi4+0x200>
 8003d4c:	ebb8 0203 	subs.w	r2, r8, r3
 8003d50:	eb64 0409 	sbc.w	r4, r4, r9
 8003d54:	fa04 f606 	lsl.w	r6, r4, r6
 8003d58:	fa22 f301 	lsr.w	r3, r2, r1
 8003d5c:	431e      	orrs	r6, r3
 8003d5e:	40cc      	lsrs	r4, r1
 8003d60:	e9c5 6400 	strd	r6, r4, [r5]
 8003d64:	2100      	movs	r1, #0
 8003d66:	e74c      	b.n	8003c02 <__udivmoddi4+0x9e>
 8003d68:	0862      	lsrs	r2, r4, #1
 8003d6a:	0848      	lsrs	r0, r1, #1
 8003d6c:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 8003d70:	0c0b      	lsrs	r3, r1, #16
 8003d72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003d76:	b28a      	uxth	r2, r1
 8003d78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003d7c:	fbb3 f1f6 	udiv	r1, r3, r6
 8003d80:	07e4      	lsls	r4, r4, #31
 8003d82:	46b4      	mov	ip, r6
 8003d84:	4637      	mov	r7, r6
 8003d86:	46b6      	mov	lr, r6
 8003d88:	231f      	movs	r3, #31
 8003d8a:	fbb0 f0f6 	udiv	r0, r0, r6
 8003d8e:	1bd2      	subs	r2, r2, r7
 8003d90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003d94:	e761      	b.n	8003c5a <__udivmoddi4+0xf6>
 8003d96:	4661      	mov	r1, ip
 8003d98:	e714      	b.n	8003bc4 <__udivmoddi4+0x60>
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	e728      	b.n	8003bf0 <__udivmoddi4+0x8c>
 8003d9e:	f1c3 0120 	rsb	r1, r3, #32
 8003da2:	fa20 f201 	lsr.w	r2, r0, r1
 8003da6:	409e      	lsls	r6, r3
 8003da8:	fa27 f101 	lsr.w	r1, r7, r1
 8003dac:	409f      	lsls	r7, r3
 8003dae:	433a      	orrs	r2, r7
 8003db0:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8003db4:	fa1f fc86 	uxth.w	ip, r6
 8003db8:	fbb1 f7fe 	udiv	r7, r1, lr
 8003dbc:	fb0e 1017 	mls	r0, lr, r7, r1
 8003dc0:	0c11      	lsrs	r1, r2, #16
 8003dc2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003dc6:	fb07 f80c 	mul.w	r8, r7, ip
 8003dca:	4588      	cmp	r8, r1
 8003dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8003dd0:	d93a      	bls.n	8003e48 <__udivmoddi4+0x2e4>
 8003dd2:	1871      	adds	r1, r6, r1
 8003dd4:	f107 30ff 	add.w	r0, r7, #4294967295
 8003dd8:	d201      	bcs.n	8003dde <__udivmoddi4+0x27a>
 8003dda:	4588      	cmp	r8, r1
 8003ddc:	d81f      	bhi.n	8003e1e <__udivmoddi4+0x2ba>
 8003dde:	eba1 0108 	sub.w	r1, r1, r8
 8003de2:	fbb1 f8fe 	udiv	r8, r1, lr
 8003de6:	fb08 f70c 	mul.w	r7, r8, ip
 8003dea:	fb0e 1118 	mls	r1, lr, r8, r1
 8003dee:	b292      	uxth	r2, r2
 8003df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003df4:	42ba      	cmp	r2, r7
 8003df6:	d22f      	bcs.n	8003e58 <__udivmoddi4+0x2f4>
 8003df8:	18b2      	adds	r2, r6, r2
 8003dfa:	f108 31ff 	add.w	r1, r8, #4294967295
 8003dfe:	d2c6      	bcs.n	8003d8e <__udivmoddi4+0x22a>
 8003e00:	42ba      	cmp	r2, r7
 8003e02:	d2c4      	bcs.n	8003d8e <__udivmoddi4+0x22a>
 8003e04:	f1a8 0102 	sub.w	r1, r8, #2
 8003e08:	4432      	add	r2, r6
 8003e0a:	e7c0      	b.n	8003d8e <__udivmoddi4+0x22a>
 8003e0c:	45f0      	cmp	r8, lr
 8003e0e:	d29c      	bcs.n	8003d4a <__udivmoddi4+0x1e6>
 8003e10:	ebbe 0302 	subs.w	r3, lr, r2
 8003e14:	eb67 070c 	sbc.w	r7, r7, ip
 8003e18:	3801      	subs	r0, #1
 8003e1a:	46b9      	mov	r9, r7
 8003e1c:	e795      	b.n	8003d4a <__udivmoddi4+0x1e6>
 8003e1e:	eba6 0808 	sub.w	r8, r6, r8
 8003e22:	4441      	add	r1, r8
 8003e24:	1eb8      	subs	r0, r7, #2
 8003e26:	fbb1 f8fe 	udiv	r8, r1, lr
 8003e2a:	fb08 f70c 	mul.w	r7, r8, ip
 8003e2e:	e7dc      	b.n	8003dea <__udivmoddi4+0x286>
 8003e30:	463b      	mov	r3, r7
 8003e32:	e77f      	b.n	8003d34 <__udivmoddi4+0x1d0>
 8003e34:	4650      	mov	r0, sl
 8003e36:	e767      	b.n	8003d08 <__udivmoddi4+0x1a4>
 8003e38:	4608      	mov	r0, r1
 8003e3a:	e6fb      	b.n	8003c34 <__udivmoddi4+0xd0>
 8003e3c:	4434      	add	r4, r6
 8003e3e:	3802      	subs	r0, #2
 8003e40:	e732      	b.n	8003ca8 <__udivmoddi4+0x144>
 8003e42:	3f02      	subs	r7, #2
 8003e44:	4432      	add	r2, r6
 8003e46:	e71b      	b.n	8003c80 <__udivmoddi4+0x11c>
 8003e48:	eba1 0108 	sub.w	r1, r1, r8
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	fbb1 f8fe 	udiv	r8, r1, lr
 8003e52:	fb08 f70c 	mul.w	r7, r8, ip
 8003e56:	e7c8      	b.n	8003dea <__udivmoddi4+0x286>
 8003e58:	4641      	mov	r1, r8
 8003e5a:	e798      	b.n	8003d8e <__udivmoddi4+0x22a>

08003e5c <_init>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	bf00      	nop
 8003e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	469e      	mov	lr, r3
 8003e66:	4770      	bx	lr

08003e68 <_fini>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr
